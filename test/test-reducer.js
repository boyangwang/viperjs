import esprima from 'esprima';
import { expect } from 'chai';
import { reducer, initialState } from '../public/js/reducers/ViperjsReducer.js';

describe('State reducer', () => {
    let state;
    beforeEach(() => {
        state = initialState;
    });
    it('should start with initialState', () => {
        expect(state).deep.equal(initialState);
    });
    it('should ignore unknown action type', () => {
        const newState = reducer(state, { type: 'xxx', value: 'xxx' });
        expect(newState).equal(state);
    });
    it('should handle toggleHistoryInputs: false -> true', () => {
        const expectedNewState = Object.assign({}, state, { isShowHistoryInputs: true });
        const newState = reducer(state, { type: 'toggleHistoryInputs' });
        expect(newState).deep.equal(expectedNewState);
    });
    it('should handle toggleHistoryInputs: true -> false', () => {
        const oldState = Object.assign({}, state, { isShowHistoryInputs: true });
        const expectedNewState = Object.assign({}, state, { isShowHistoryInputs: false });
        const newState = reducer(oldState, { type: 'toggleHistoryInputs' });
        expect(newState).deep.equal(expectedNewState);
    });
    it('should handle toggleHistoryTokenizeds: false -> true', () => {
        const expectedNewState = Object.assign({}, state, { isShowHistoryTokenizeds: true });
        const newState = reducer(state, { type: 'toggleHistoryTokenizeds' });
        expect(newState).deep.equal(expectedNewState);
    });
    it('should handle toggleHistoryTokenizeds: true -> false', () => {
        const oldState = Object.assign({}, state, { isShowHistoryTokenizeds: true });
        const expectedNewState = Object.assign({}, state, { isShowHistoryTokenizeds: false });
        const newState = reducer(oldState, { type: 'toggleHistoryTokenizeds' });
        expect(newState).deep.equal(expectedNewState);
    });
    it('should handle toggleHistoryParseds: false -> true', () => {
        const expectedNewState = Object.assign({}, state, { isShowHistoryParseds: true });
        const newState = reducer(state, { type: 'toggleHistoryParseds' });
        expect(newState).deep.equal(expectedNewState);
    });
    it('should handle toggleHistoryParseds: true -> false', () => {
        const oldState = Object.assign({}, state, { isShowHistoryParseds: true });
        const expectedNewState = Object.assign({}, state, { isShowHistoryParseds: false });
        const newState = reducer(oldState, { type: 'toggleHistoryParseds' });
        expect(newState).deep.equal(expectedNewState);
    });
    it('reinput without Tokenize', () => {
        const expectedNewState = Object.assign({}, state, { currentInput: 'b' });
        let newState = reducer(state, { type: 'input', value: 'a' });
        newState = reducer(newState, { type: 'input', value: 'b' });
        expect(newState).deep.equal(expectedNewState);
    });
    it('reinput without Tokenize', () => {
        const expectedNewState = Object.assign({}, state, { currentInput: 'b' });
        let newState = reducer(state, { type: 'input', value: 'a' });
        newState = reducer(newState, { type: 'input', value: 'b' });
        expect(newState).deep.equal(expectedNewState);
    });
    it('input "a" -> Tokenize -> input "b"', () => {
        const expectedNewState = Object.assign({}, state, {
            historyInputs: [{
                id: 0,
                value: 'a',
            }],
            currentInput: 'b',
            historyTokenizeds: [{
                id: 0,
                value: esprima.tokenize('a'),
            }],
            nextId: 1,
        });
        let newState = reducer(state, { type: 'input', value: 'a' });
        newState = reducer(newState, { type: 'tokenize' });
        newState = reducer(newState, { type: 'input', value: '' });
        newState = reducer(newState, { type: 'input', value: 'b' });
        expect(newState).deep.equal(expectedNewState);
    });
    it('should handle [tokenize]', () => {
        state = reducer({ historyInputs: [], currentInput: '', historyTokenizeds: [], historyParseds: [], isShowHistoryInputs: false, isShowHistoryTokenizeds: false, isShowHistoryParseds: false, nextId: 0 }, { type: 'tokenize' });
        expect(state.nextId).deep.equal(1);
        expect(state.historyTokenizeds.length).deep.equal(1);
        expect(state.historyTokenizeds[0]).deep.equal({ value: [], id: 0 });
        expect(state.historyInputs.length).deep.equal(1);
        expect(state.historyInputs[0]).deep.equal({ value: '', id: 0 });
    });
    it('should handle [parse]', () => {
        const newState = reducer(state, { type: 'parse' });
        expect(newState).deep.equal(state);
    });
    it('should handle [input, tokenize, parse]', () => {
        state = reducer({ historyInputs: [], currentInput: '', historyTokenizeds: [], historyParseds: [], isShowHistoryInputs: false, isShowHistoryTokenizeds: false, isShowHistoryParseds: false, nextId: 0 }, { type: 'input', value: 'v' });
        expect(state.currentInput).deep.equal('v');
        state = reducer({ historyInputs: [], currentInput: 'v', historyTokenizeds: [], historyParseds: [], isShowHistoryInputs: false, isShowHistoryTokenizeds: false, isShowHistoryParseds: false, nextId: 0 }, { type: 'input', value: 'va' });
        expect(state.currentInput).deep.equal('va');
        state = reducer({ historyInputs: [], currentInput: 'va', historyTokenizeds: [], historyParseds: [], isShowHistoryInputs: false, isShowHistoryTokenizeds: false, isShowHistoryParseds: false, nextId: 0 }, { type: 'input', value: 'var' });
        expect(state.currentInput).deep.equal('var');
        state = reducer({ historyInputs: [], currentInput: 'var', historyTokenizeds: [], historyParseds: [], isShowHistoryInputs: false, isShowHistoryTokenizeds: false, isShowHistoryParseds: false, nextId: 0 }, { type: 'input', value: 'var ' });
        expect(state.currentInput).deep.equal('var ');
        state = reducer({ historyInputs: [], currentInput: 'var ', historyTokenizeds: [], historyParseds: [], isShowHistoryInputs: false, isShowHistoryTokenizeds: false, isShowHistoryParseds: false, nextId: 0 }, { type: 'input', value: 'var a' });
        expect(state.currentInput).deep.equal('var a');
        state = reducer({ historyInputs: [], currentInput: 'var a', historyTokenizeds: [], historyParseds: [], isShowHistoryInputs: false, isShowHistoryTokenizeds: false, isShowHistoryParseds: false, nextId: 0 }, { type: 'input', value: 'var a ' });
        expect(state.currentInput).deep.equal('var a ');
        state = reducer({ historyInputs: [], currentInput: 'var a ', historyTokenizeds: [], historyParseds: [], isShowHistoryInputs: false, isShowHistoryTokenizeds: false, isShowHistoryParseds: false, nextId: 0 }, { type: 'input', value: 'var a =' });
        expect(state.currentInput).deep.equal('var a =');
        state = reducer({ historyInputs: [], currentInput: 'var a =', historyTokenizeds: [], historyParseds: [], isShowHistoryInputs: false, isShowHistoryTokenizeds: false, isShowHistoryParseds: false, nextId: 0 }, { type: 'input', value: 'var a = ' });
        expect(state.currentInput).deep.equal('var a = ');
        state = reducer({ historyInputs: [], currentInput: 'var a = ', historyTokenizeds: [], historyParseds: [], isShowHistoryInputs: false, isShowHistoryTokenizeds: false, isShowHistoryParseds: false, nextId: 0 }, { type: 'input', value: 'var a = 1' });
        expect(state.currentInput).deep.equal('var a = 1');
        state = reducer({ historyInputs: [], currentInput: 'var a = 1', historyTokenizeds: [], historyParseds: [], isShowHistoryInputs: false, isShowHistoryTokenizeds: false, isShowHistoryParseds: false, nextId: 0 }, { type: 'input', value: 'var a = 1;' });
        expect(state.currentInput).deep.equal('var a = 1;');
        state = reducer({ historyInputs: [], currentInput: 'var a = 1;', historyTokenizeds: [], historyParseds: [], isShowHistoryInputs: false, isShowHistoryTokenizeds: false, isShowHistoryParseds: false, nextId: 0 }, { type: 'tokenize' });
        expect(state.nextId).deep.equal(1);
        expect(state.historyTokenizeds.length).deep.equal(1);
        expect(state.historyTokenizeds[0]).deep.equal({ value: [{ value: 'var', type: 'Keyword' }, { value: 'a', type: 'Identifier' }, { value: '=', type: 'Punctuator' }, { value: '1', type: 'Numeric' }, { value: ';', type: 'Punctuator' }], id: 0 });
        expect(state.historyInputs.length).deep.equal(1);
        expect(state.historyInputs[0]).deep.equal({ value: 'var a = 1;', id: 0 });
        state = reducer({ historyInputs: [{ id: 0, value: 'var a = 1;' }], currentInput: 'var a = 1;', historyTokenizeds: [{ id: 0, value: [{ type: 'Keyword', value: 'var' }, { type: 'Identifier', value: 'a' }, { type: 'Punctuator', value: '=' }, { type: 'Numeric', value: '1' }, { type: 'Punctuator', value: ';' }] }], historyParseds: [], isShowHistoryInputs: false, isShowHistoryTokenizeds: false, isShowHistoryParseds: false, nextId: 1 }, { type: 'parse' });
        expect(state.historyParseds.length).deep.equal(1);
        expect(state.historyParseds[0]).deep.equal({ value: { sourceType: 'script', body: [{ kind: 'var', declarations: [{ init: { raw: '1', value: 1, type: 'Literal' }, id: { name: 'a', type: 'Identifier' }, type: 'VariableDeclarator' }], type: 'VariableDeclaration' }], type: 'Program' }, id: 0 });
        expect(state.historyTokenizeds[0].value.length).deep.equal(5);
        expect(state.historyTokenizeds[0].value[0].value).deep.equal('var');
        expect(state.historyTokenizeds[0].value[0].type).deep.equal('Keyword');
        expect(state.historyTokenizeds[0].value[1].value).deep.equal('a');
        expect(state.historyTokenizeds[0].value[1].type).deep.equal('Identifier');
        expect(state.historyTokenizeds[0].value[2].value).deep.equal('=');
        expect(state.historyTokenizeds[0].value[3].value).deep.equal('1');
        expect(state.historyTokenizeds[0].value[3].type).deep.equal('Numeric');
    });
    it('should handle [input, tokenize, parse, input, tokenize, parse]', () => {
        state = reducer({ historyInputs: [], currentInput: '', historyTokenizeds: [], historyParseds: [], isShowHistoryInputs: false, isShowHistoryTokenizeds: false, isShowHistoryParseds: false, nextId: 0 }, { type: 'input', value: 'v' });
        expect(state.currentInput).deep.equal('v');
        state = reducer({ historyInputs: [], currentInput: 'v', historyTokenizeds: [], historyParseds: [], isShowHistoryInputs: false, isShowHistoryTokenizeds: false, isShowHistoryParseds: false, nextId: 0 }, { type: 'input', value: 'va' });
        expect(state.currentInput).deep.equal('va');
        state = reducer({ historyInputs: [], currentInput: 'va', historyTokenizeds: [], historyParseds: [], isShowHistoryInputs: false, isShowHistoryTokenizeds: false, isShowHistoryParseds: false, nextId: 0 }, { type: 'input', value: 'var' });
        expect(state.currentInput).deep.equal('var');
        state = reducer({ historyInputs: [], currentInput: 'var', historyTokenizeds: [], historyParseds: [], isShowHistoryInputs: false, isShowHistoryTokenizeds: false, isShowHistoryParseds: false, nextId: 0 }, { type: 'input', value: 'var ' });
        expect(state.currentInput).deep.equal('var ');
        state = reducer({ historyInputs: [], currentInput: 'var ', historyTokenizeds: [], historyParseds: [], isShowHistoryInputs: false, isShowHistoryTokenizeds: false, isShowHistoryParseds: false, nextId: 0 }, { type: 'input', value: 'var a' });
        expect(state.currentInput).deep.equal('var a');
        state = reducer({ historyInputs: [], currentInput: 'var a', historyTokenizeds: [], historyParseds: [], isShowHistoryInputs: false, isShowHistoryTokenizeds: false, isShowHistoryParseds: false, nextId: 0 }, { type: 'input', value: 'var a ' });
        expect(state.currentInput).deep.equal('var a ');
        state = reducer({ historyInputs: [], currentInput: 'var a ', historyTokenizeds: [], historyParseds: [], isShowHistoryInputs: false, isShowHistoryTokenizeds: false, isShowHistoryParseds: false, nextId: 0 }, { type: 'input', value: 'var a =' });
        expect(state.currentInput).deep.equal('var a =');
        state = reducer({ historyInputs: [], currentInput: 'var a =', historyTokenizeds: [], historyParseds: [], isShowHistoryInputs: false, isShowHistoryTokenizeds: false, isShowHistoryParseds: false, nextId: 0 }, { type: 'input', value: 'var a = ' });
        expect(state.currentInput).deep.equal('var a = ');
        state = reducer({ historyInputs: [], currentInput: 'var a = ', historyTokenizeds: [], historyParseds: [], isShowHistoryInputs: false, isShowHistoryTokenizeds: false, isShowHistoryParseds: false, nextId: 0 }, { type: 'input', value: 'var a = 1' });
        expect(state.currentInput).deep.equal('var a = 1');
        state = reducer({ historyInputs: [], currentInput: 'var a = 1', historyTokenizeds: [], historyParseds: [], isShowHistoryInputs: false, isShowHistoryTokenizeds: false, isShowHistoryParseds: false, nextId: 0 }, { type: 'input', value: 'var a = 1;' });
        expect(state.currentInput).deep.equal('var a = 1;');
        state = reducer({ historyInputs: [], currentInput: 'var a = 1;', historyTokenizeds: [], historyParseds: [], isShowHistoryInputs: false, isShowHistoryTokenizeds: false, isShowHistoryParseds: false, nextId: 0 }, { type: 'tokenize' });
        expect(state.nextId).deep.equal(1);
        expect(state.historyTokenizeds.length).deep.equal(1);
        expect(state.historyTokenizeds[0]).deep.equal({ value: [{ value: 'var', type: 'Keyword' }, { value: 'a', type: 'Identifier' }, { value: '=', type: 'Punctuator' }, { value: '1', type: 'Numeric' }, { value: ';', type: 'Punctuator' }], id: 0 });
        expect(state.historyInputs.length).deep.equal(1);
        expect(state.historyInputs[0]).deep.equal({ value: 'var a = 1;', id: 0 });
        state = reducer({ historyInputs: [{ id: 0, value: 'var a = 1;' }], currentInput: 'var a = 1;', historyTokenizeds: [{ id: 0, value: [{ type: 'Keyword', value: 'var' }, { type: 'Identifier', value: 'a' }, { type: 'Punctuator', value: '=' }, { type: 'Numeric', value: '1' }, { type: 'Punctuator', value: ';' }] }], historyParseds: [], isShowHistoryInputs: false, isShowHistoryTokenizeds: false, isShowHistoryParseds: false, nextId: 1 }, { type: 'parse' });
        expect(state.historyParseds.length).deep.equal(1);
        expect(state.historyParseds[0]).deep.equal({ value: { sourceType: 'script', body: [{ kind: 'var', declarations: [{ init: { raw: '1', value: 1, type: 'Literal' }, id: { name: 'a', type: 'Identifier' }, type: 'VariableDeclarator' }], type: 'VariableDeclaration' }], type: 'Program' }, id: 0 });
        expect(state.historyTokenizeds[0].value.length).deep.equal(5);
        expect(state.historyTokenizeds[0].value[0].value).deep.equal('var');
        expect(state.historyTokenizeds[0].value[0].type).deep.equal('Keyword');
        expect(state.historyTokenizeds[0].value[1].value).deep.equal('a');
        expect(state.historyTokenizeds[0].value[1].type).deep.equal('Identifier');
        expect(state.historyTokenizeds[0].value[2].value).deep.equal('=');
        expect(state.historyTokenizeds[0].value[3].value).deep.equal('1');
        expect(state.historyTokenizeds[0].value[3].type).deep.equal('Numeric');
        state = reducer({ historyInputs: [{ id: 0, value: 'var a = 1;' }], currentInput: 'var a = 1;', historyTokenizeds: [{ id: 0, value: [{ type: 'Keyword', value: 'var' }, { type: 'Identifier', value: 'a' }, { type: 'Punctuator', value: '=' }, { type: 'Numeric', value: '1' }, { type: 'Punctuator', value: ';' }] }], historyParseds: [{ id: 0, value: { type: 'Program', body: [{ type: 'VariableDeclaration', declarations: [{ type: 'VariableDeclarator', id: { type: 'Identifier', name: 'a' }, init: { type: 'Literal', value: 1, raw: '1' } }], kind: 'var' }], sourceType: 'script' } }], isShowHistoryInputs: false, isShowHistoryTokenizeds: false, isShowHistoryParseds: false, nextId: 1 }, { type: 'input', value: 'var a = 1' });
        expect(state.historyTokenizeds[0].value.length).deep.equal(5);
        expect(state.historyTokenizeds[0].value[0].value).deep.equal('var');
        expect(state.historyTokenizeds[0].value[0].type).deep.equal('Keyword');
        expect(state.historyTokenizeds[0].value[1].value).deep.equal('a');
        expect(state.historyTokenizeds[0].value[1].type).deep.equal('Identifier');
        expect(state.historyTokenizeds[0].value[2].value).deep.equal('=');
        expect(state.historyTokenizeds[0].value[3].value).deep.equal('1');
        expect(state.historyTokenizeds[0].value[3].type).deep.equal('Numeric');
        expect(state.currentInput).deep.equal('var a = 1');
        state = reducer({ historyInputs: [{ id: 0, value: 'var a = 1;' }], currentInput: 'var a = 1', historyTokenizeds: [{ id: 0, value: [{ type: 'Keyword', value: 'var' }, { type: 'Identifier', value: 'a' }, { type: 'Punctuator', value: '=' }, { type: 'Numeric', value: '1' }, { type: 'Punctuator', value: ';' }] }], historyParseds: [{ id: 0, value: { type: 'Program', body: [{ type: 'VariableDeclaration', declarations: [{ type: 'VariableDeclarator', id: { type: 'Identifier', name: 'a' }, init: { type: 'Literal', value: 1, raw: '1' } }], kind: 'var' }], sourceType: 'script' } }], isShowHistoryInputs: false, isShowHistoryTokenizeds: false, isShowHistoryParseds: false, nextId: 1 }, { type: 'input', value: 'var a = ' });
        expect(state.historyTokenizeds[0].value.length).deep.equal(5);
        expect(state.historyTokenizeds[0].value[0].value).deep.equal('var');
        expect(state.historyTokenizeds[0].value[0].type).deep.equal('Keyword');
        expect(state.historyTokenizeds[0].value[1].value).deep.equal('a');
        expect(state.historyTokenizeds[0].value[1].type).deep.equal('Identifier');
        expect(state.historyTokenizeds[0].value[2].value).deep.equal('=');
        expect(state.historyTokenizeds[0].value[3].value).deep.equal('1');
        expect(state.historyTokenizeds[0].value[3].type).deep.equal('Numeric');
        expect(state.currentInput).deep.equal('var a = ');
        state = reducer({ historyInputs: [{ id: 0, value: 'var a = 1;' }], currentInput: 'var a = ', historyTokenizeds: [{ id: 0, value: [{ type: 'Keyword', value: 'var' }, { type: 'Identifier', value: 'a' }, { type: 'Punctuator', value: '=' }, { type: 'Numeric', value: '1' }, { type: 'Punctuator', value: ';' }] }], historyParseds: [{ id: 0, value: { type: 'Program', body: [{ type: 'VariableDeclaration', declarations: [{ type: 'VariableDeclarator', id: { type: 'Identifier', name: 'a' }, init: { type: 'Literal', value: 1, raw: '1' } }], kind: 'var' }], sourceType: 'script' } }], isShowHistoryInputs: false, isShowHistoryTokenizeds: false, isShowHistoryParseds: false, nextId: 1 }, { type: 'input', value: 'var a =' });
        expect(state.historyTokenizeds[0].value.length).deep.equal(5);
        expect(state.historyTokenizeds[0].value[0].value).deep.equal('var');
        expect(state.historyTokenizeds[0].value[0].type).deep.equal('Keyword');
        expect(state.historyTokenizeds[0].value[1].value).deep.equal('a');
        expect(state.historyTokenizeds[0].value[1].type).deep.equal('Identifier');
        expect(state.historyTokenizeds[0].value[2].value).deep.equal('=');
        expect(state.historyTokenizeds[0].value[3].value).deep.equal('1');
        expect(state.historyTokenizeds[0].value[3].type).deep.equal('Numeric');
        expect(state.currentInput).deep.equal('var a =');
        state = reducer({ historyInputs: [{ id: 0, value: 'var a = 1;' }], currentInput: 'var a =', historyTokenizeds: [{ id: 0, value: [{ type: 'Keyword', value: 'var' }, { type: 'Identifier', value: 'a' }, { type: 'Punctuator', value: '=' }, { type: 'Numeric', value: '1' }, { type: 'Punctuator', value: ';' }] }], historyParseds: [{ id: 0, value: { type: 'Program', body: [{ type: 'VariableDeclaration', declarations: [{ type: 'VariableDeclarator', id: { type: 'Identifier', name: 'a' }, init: { type: 'Literal', value: 1, raw: '1' } }], kind: 'var' }], sourceType: 'script' } }], isShowHistoryInputs: false, isShowHistoryTokenizeds: false, isShowHistoryParseds: false, nextId: 1 }, { type: 'input', value: 'var a ' });
        expect(state.historyTokenizeds[0].value.length).deep.equal(5);
        expect(state.historyTokenizeds[0].value[0].value).deep.equal('var');
        expect(state.historyTokenizeds[0].value[0].type).deep.equal('Keyword');
        expect(state.historyTokenizeds[0].value[1].value).deep.equal('a');
        expect(state.historyTokenizeds[0].value[1].type).deep.equal('Identifier');
        expect(state.historyTokenizeds[0].value[2].value).deep.equal('=');
        expect(state.historyTokenizeds[0].value[3].value).deep.equal('1');
        expect(state.historyTokenizeds[0].value[3].type).deep.equal('Numeric');
        expect(state.currentInput).deep.equal('var a ');
        state = reducer({ historyInputs: [{ id: 0, value: 'var a = 1;' }], currentInput: 'var a ', historyTokenizeds: [{ id: 0, value: [{ type: 'Keyword', value: 'var' }, { type: 'Identifier', value: 'a' }, { type: 'Punctuator', value: '=' }, { type: 'Numeric', value: '1' }, { type: 'Punctuator', value: ';' }] }], historyParseds: [{ id: 0, value: { type: 'Program', body: [{ type: 'VariableDeclaration', declarations: [{ type: 'VariableDeclarator', id: { type: 'Identifier', name: 'a' }, init: { type: 'Literal', value: 1, raw: '1' } }], kind: 'var' }], sourceType: 'script' } }], isShowHistoryInputs: false, isShowHistoryTokenizeds: false, isShowHistoryParseds: false, nextId: 1 }, { type: 'input', value: 'var a' });
        expect(state.historyTokenizeds[0].value.length).deep.equal(5);
        expect(state.historyTokenizeds[0].value[0].value).deep.equal('var');
        expect(state.historyTokenizeds[0].value[0].type).deep.equal('Keyword');
        expect(state.historyTokenizeds[0].value[1].value).deep.equal('a');
        expect(state.historyTokenizeds[0].value[1].type).deep.equal('Identifier');
        expect(state.historyTokenizeds[0].value[2].value).deep.equal('=');
        expect(state.historyTokenizeds[0].value[3].value).deep.equal('1');
        expect(state.historyTokenizeds[0].value[3].type).deep.equal('Numeric');
        expect(state.currentInput).deep.equal('var a');
        state = reducer({ historyInputs: [{ id: 0, value: 'var a = 1;' }], currentInput: 'var a', historyTokenizeds: [{ id: 0, value: [{ type: 'Keyword', value: 'var' }, { type: 'Identifier', value: 'a' }, { type: 'Punctuator', value: '=' }, { type: 'Numeric', value: '1' }, { type: 'Punctuator', value: ';' }] }], historyParseds: [{ id: 0, value: { type: 'Program', body: [{ type: 'VariableDeclaration', declarations: [{ type: 'VariableDeclarator', id: { type: 'Identifier', name: 'a' }, init: { type: 'Literal', value: 1, raw: '1' } }], kind: 'var' }], sourceType: 'script' } }], isShowHistoryInputs: false, isShowHistoryTokenizeds: false, isShowHistoryParseds: false, nextId: 1 }, { type: 'input', value: 'var ' });
        expect(state.historyTokenizeds[0].value.length).deep.equal(5);
        expect(state.historyTokenizeds[0].value[0].value).deep.equal('var');
        expect(state.historyTokenizeds[0].value[0].type).deep.equal('Keyword');
        expect(state.historyTokenizeds[0].value[1].value).deep.equal('a');
        expect(state.historyTokenizeds[0].value[1].type).deep.equal('Identifier');
        expect(state.historyTokenizeds[0].value[2].value).deep.equal('=');
        expect(state.historyTokenizeds[0].value[3].value).deep.equal('1');
        expect(state.historyTokenizeds[0].value[3].type).deep.equal('Numeric');
        expect(state.currentInput).deep.equal('var ');
        state = reducer({ historyInputs: [{ id: 0, value: 'var a = 1;' }], currentInput: 'var ', historyTokenizeds: [{ id: 0, value: [{ type: 'Keyword', value: 'var' }, { type: 'Identifier', value: 'a' }, { type: 'Punctuator', value: '=' }, { type: 'Numeric', value: '1' }, { type: 'Punctuator', value: ';' }] }], historyParseds: [{ id: 0, value: { type: 'Program', body: [{ type: 'VariableDeclaration', declarations: [{ type: 'VariableDeclarator', id: { type: 'Identifier', name: 'a' }, init: { type: 'Literal', value: 1, raw: '1' } }], kind: 'var' }], sourceType: 'script' } }], isShowHistoryInputs: false, isShowHistoryTokenizeds: false, isShowHistoryParseds: false, nextId: 1 }, { type: 'input', value: 'var' });
        expect(state.historyTokenizeds[0].value.length).deep.equal(5);
        expect(state.historyTokenizeds[0].value[0].value).deep.equal('var');
        expect(state.historyTokenizeds[0].value[0].type).deep.equal('Keyword');
        expect(state.historyTokenizeds[0].value[1].value).deep.equal('a');
        expect(state.historyTokenizeds[0].value[1].type).deep.equal('Identifier');
        expect(state.historyTokenizeds[0].value[2].value).deep.equal('=');
        expect(state.historyTokenizeds[0].value[3].value).deep.equal('1');
        expect(state.historyTokenizeds[0].value[3].type).deep.equal('Numeric');
        expect(state.currentInput).deep.equal('var');
        state = reducer({ historyInputs: [{ id: 0, value: 'var a = 1;' }], currentInput: 'var', historyTokenizeds: [{ id: 0, value: [{ type: 'Keyword', value: 'var' }, { type: 'Identifier', value: 'a' }, { type: 'Punctuator', value: '=' }, { type: 'Numeric', value: '1' }, { type: 'Punctuator', value: ';' }] }], historyParseds: [{ id: 0, value: { type: 'Program', body: [{ type: 'VariableDeclaration', declarations: [{ type: 'VariableDeclarator', id: { type: 'Identifier', name: 'a' }, init: { type: 'Literal', value: 1, raw: '1' } }], kind: 'var' }], sourceType: 'script' } }], isShowHistoryInputs: false, isShowHistoryTokenizeds: false, isShowHistoryParseds: false, nextId: 1 }, { type: 'input', value: 'va' });
        expect(state.historyTokenizeds[0].value.length).deep.equal(5);
        expect(state.historyTokenizeds[0].value[0].value).deep.equal('var');
        expect(state.historyTokenizeds[0].value[0].type).deep.equal('Keyword');
        expect(state.historyTokenizeds[0].value[1].value).deep.equal('a');
        expect(state.historyTokenizeds[0].value[1].type).deep.equal('Identifier');
        expect(state.historyTokenizeds[0].value[2].value).deep.equal('=');
        expect(state.historyTokenizeds[0].value[3].value).deep.equal('1');
        expect(state.historyTokenizeds[0].value[3].type).deep.equal('Numeric');
        expect(state.currentInput).deep.equal('va');
        state = reducer({ historyInputs: [{ id: 0, value: 'var a = 1;' }], currentInput: 'va', historyTokenizeds: [{ id: 0, value: [{ type: 'Keyword', value: 'var' }, { type: 'Identifier', value: 'a' }, { type: 'Punctuator', value: '=' }, { type: 'Numeric', value: '1' }, { type: 'Punctuator', value: ';' }] }], historyParseds: [{ id: 0, value: { type: 'Program', body: [{ type: 'VariableDeclaration', declarations: [{ type: 'VariableDeclarator', id: { type: 'Identifier', name: 'a' }, init: { type: 'Literal', value: 1, raw: '1' } }], kind: 'var' }], sourceType: 'script' } }], isShowHistoryInputs: false, isShowHistoryTokenizeds: false, isShowHistoryParseds: false, nextId: 1 }, { type: 'input', value: 'v' });
        expect(state.historyTokenizeds[0].value.length).deep.equal(5);
        expect(state.historyTokenizeds[0].value[0].value).deep.equal('var');
        expect(state.historyTokenizeds[0].value[0].type).deep.equal('Keyword');
        expect(state.historyTokenizeds[0].value[1].value).deep.equal('a');
        expect(state.historyTokenizeds[0].value[1].type).deep.equal('Identifier');
        expect(state.historyTokenizeds[0].value[2].value).deep.equal('=');
        expect(state.historyTokenizeds[0].value[3].value).deep.equal('1');
        expect(state.historyTokenizeds[0].value[3].type).deep.equal('Numeric');
        expect(state.currentInput).deep.equal('v');
        state = reducer({ historyInputs: [{ id: 0, value: 'var a = 1;' }], currentInput: 'v', historyTokenizeds: [{ id: 0, value: [{ type: 'Keyword', value: 'var' }, { type: 'Identifier', value: 'a' }, { type: 'Punctuator', value: '=' }, { type: 'Numeric', value: '1' }, { type: 'Punctuator', value: ';' }] }], historyParseds: [{ id: 0, value: { type: 'Program', body: [{ type: 'VariableDeclaration', declarations: [{ type: 'VariableDeclarator', id: { type: 'Identifier', name: 'a' }, init: { type: 'Literal', value: 1, raw: '1' } }], kind: 'var' }], sourceType: 'script' } }], isShowHistoryInputs: false, isShowHistoryTokenizeds: false, isShowHistoryParseds: false, nextId: 1 }, { type: 'input', value: '' });
        expect(state.historyTokenizeds[0].value.length).deep.equal(5);
        expect(state.historyTokenizeds[0].value[0].value).deep.equal('var');
        expect(state.historyTokenizeds[0].value[0].type).deep.equal('Keyword');
        expect(state.historyTokenizeds[0].value[1].value).deep.equal('a');
        expect(state.historyTokenizeds[0].value[1].type).deep.equal('Identifier');
        expect(state.historyTokenizeds[0].value[2].value).deep.equal('=');
        expect(state.historyTokenizeds[0].value[3].value).deep.equal('1');
        expect(state.historyTokenizeds[0].value[3].type).deep.equal('Numeric');
        expect(state.currentInput).deep.equal('');
        state = reducer({ historyInputs: [{ id: 0, value: 'var a = 1;' }], currentInput: '', historyTokenizeds: [{ id: 0, value: [{ type: 'Keyword', value: 'var' }, { type: 'Identifier', value: 'a' }, { type: 'Punctuator', value: '=' }, { type: 'Numeric', value: '1' }, { type: 'Punctuator', value: ';' }] }], historyParseds: [{ id: 0, value: { type: 'Program', body: [{ type: 'VariableDeclaration', declarations: [{ type: 'VariableDeclarator', id: { type: 'Identifier', name: 'a' }, init: { type: 'Literal', value: 1, raw: '1' } }], kind: 'var' }], sourceType: 'script' } }], isShowHistoryInputs: false, isShowHistoryTokenizeds: false, isShowHistoryParseds: false, nextId: 1 }, { type: 'input', value: 'v' });
        expect(state.historyTokenizeds[0].value.length).deep.equal(5);
        expect(state.historyTokenizeds[0].value[0].value).deep.equal('var');
        expect(state.historyTokenizeds[0].value[0].type).deep.equal('Keyword');
        expect(state.historyTokenizeds[0].value[1].value).deep.equal('a');
        expect(state.historyTokenizeds[0].value[1].type).deep.equal('Identifier');
        expect(state.historyTokenizeds[0].value[2].value).deep.equal('=');
        expect(state.historyTokenizeds[0].value[3].value).deep.equal('1');
        expect(state.historyTokenizeds[0].value[3].type).deep.equal('Numeric');
        expect(state.currentInput).deep.equal('v');
        state = reducer({ historyInputs: [{ id: 0, value: 'var a = 1;' }], currentInput: 'v', historyTokenizeds: [{ id: 0, value: [{ type: 'Keyword', value: 'var' }, { type: 'Identifier', value: 'a' }, { type: 'Punctuator', value: '=' }, { type: 'Numeric', value: '1' }, { type: 'Punctuator', value: ';' }] }], historyParseds: [{ id: 0, value: { type: 'Program', body: [{ type: 'VariableDeclaration', declarations: [{ type: 'VariableDeclarator', id: { type: 'Identifier', name: 'a' }, init: { type: 'Literal', value: 1, raw: '1' } }], kind: 'var' }], sourceType: 'script' } }], isShowHistoryInputs: false, isShowHistoryTokenizeds: false, isShowHistoryParseds: false, nextId: 1 }, { type: 'input', value: 'va' });
        expect(state.historyTokenizeds[0].value.length).deep.equal(5);
        expect(state.historyTokenizeds[0].value[0].value).deep.equal('var');
        expect(state.historyTokenizeds[0].value[0].type).deep.equal('Keyword');
        expect(state.historyTokenizeds[0].value[1].value).deep.equal('a');
        expect(state.historyTokenizeds[0].value[1].type).deep.equal('Identifier');
        expect(state.historyTokenizeds[0].value[2].value).deep.equal('=');
        expect(state.historyTokenizeds[0].value[3].value).deep.equal('1');
        expect(state.historyTokenizeds[0].value[3].type).deep.equal('Numeric');
        expect(state.currentInput).deep.equal('va');
        state = reducer({ historyInputs: [{ id: 0, value: 'var a = 1;' }], currentInput: 'va', historyTokenizeds: [{ id: 0, value: [{ type: 'Keyword', value: 'var' }, { type: 'Identifier', value: 'a' }, { type: 'Punctuator', value: '=' }, { type: 'Numeric', value: '1' }, { type: 'Punctuator', value: ';' }] }], historyParseds: [{ id: 0, value: { type: 'Program', body: [{ type: 'VariableDeclaration', declarations: [{ type: 'VariableDeclarator', id: { type: 'Identifier', name: 'a' }, init: { type: 'Literal', value: 1, raw: '1' } }], kind: 'var' }], sourceType: 'script' } }], isShowHistoryInputs: false, isShowHistoryTokenizeds: false, isShowHistoryParseds: false, nextId: 1 }, { type: 'input', value: 'var' });
        expect(state.historyTokenizeds[0].value.length).deep.equal(5);
        expect(state.historyTokenizeds[0].value[0].value).deep.equal('var');
        expect(state.historyTokenizeds[0].value[0].type).deep.equal('Keyword');
        expect(state.historyTokenizeds[0].value[1].value).deep.equal('a');
        expect(state.historyTokenizeds[0].value[1].type).deep.equal('Identifier');
        expect(state.historyTokenizeds[0].value[2].value).deep.equal('=');
        expect(state.historyTokenizeds[0].value[3].value).deep.equal('1');
        expect(state.historyTokenizeds[0].value[3].type).deep.equal('Numeric');
        expect(state.currentInput).deep.equal('var');
        state = reducer({ historyInputs: [{ id: 0, value: 'var a = 1;' }], currentInput: 'var', historyTokenizeds: [{ id: 0, value: [{ type: 'Keyword', value: 'var' }, { type: 'Identifier', value: 'a' }, { type: 'Punctuator', value: '=' }, { type: 'Numeric', value: '1' }, { type: 'Punctuator', value: ';' }] }], historyParseds: [{ id: 0, value: { type: 'Program', body: [{ type: 'VariableDeclaration', declarations: [{ type: 'VariableDeclarator', id: { type: 'Identifier', name: 'a' }, init: { type: 'Literal', value: 1, raw: '1' } }], kind: 'var' }], sourceType: 'script' } }], isShowHistoryInputs: false, isShowHistoryTokenizeds: false, isShowHistoryParseds: false, nextId: 1 }, { type: 'input', value: 'var ' });
        expect(state.historyTokenizeds[0].value.length).deep.equal(5);
        expect(state.historyTokenizeds[0].value[0].value).deep.equal('var');
        expect(state.historyTokenizeds[0].value[0].type).deep.equal('Keyword');
        expect(state.historyTokenizeds[0].value[1].value).deep.equal('a');
        expect(state.historyTokenizeds[0].value[1].type).deep.equal('Identifier');
        expect(state.historyTokenizeds[0].value[2].value).deep.equal('=');
        expect(state.historyTokenizeds[0].value[3].value).deep.equal('1');
        expect(state.historyTokenizeds[0].value[3].type).deep.equal('Numeric');
        expect(state.currentInput).deep.equal('var ');
        state = reducer({ historyInputs: [{ id: 0, value: 'var a = 1;' }], currentInput: 'var ', historyTokenizeds: [{ id: 0, value: [{ type: 'Keyword', value: 'var' }, { type: 'Identifier', value: 'a' }, { type: 'Punctuator', value: '=' }, { type: 'Numeric', value: '1' }, { type: 'Punctuator', value: ';' }] }], historyParseds: [{ id: 0, value: { type: 'Program', body: [{ type: 'VariableDeclaration', declarations: [{ type: 'VariableDeclarator', id: { type: 'Identifier', name: 'a' }, init: { type: 'Literal', value: 1, raw: '1' } }], kind: 'var' }], sourceType: 'script' } }], isShowHistoryInputs: false, isShowHistoryTokenizeds: false, isShowHistoryParseds: false, nextId: 1 }, { type: 'input', value: 'var b' });
        expect(state.historyTokenizeds[0].value.length).deep.equal(5);
        expect(state.historyTokenizeds[0].value[0].value).deep.equal('var');
        expect(state.historyTokenizeds[0].value[0].type).deep.equal('Keyword');
        expect(state.historyTokenizeds[0].value[1].value).deep.equal('a');
        expect(state.historyTokenizeds[0].value[1].type).deep.equal('Identifier');
        expect(state.historyTokenizeds[0].value[2].value).deep.equal('=');
        expect(state.historyTokenizeds[0].value[3].value).deep.equal('1');
        expect(state.historyTokenizeds[0].value[3].type).deep.equal('Numeric');
        expect(state.currentInput).deep.equal('var b');
        state = reducer({ historyInputs: [{ id: 0, value: 'var a = 1;' }], currentInput: 'var b', historyTokenizeds: [{ id: 0, value: [{ type: 'Keyword', value: 'var' }, { type: 'Identifier', value: 'a' }, { type: 'Punctuator', value: '=' }, { type: 'Numeric', value: '1' }, { type: 'Punctuator', value: ';' }] }], historyParseds: [{ id: 0, value: { type: 'Program', body: [{ type: 'VariableDeclaration', declarations: [{ type: 'VariableDeclarator', id: { type: 'Identifier', name: 'a' }, init: { type: 'Literal', value: 1, raw: '1' } }], kind: 'var' }], sourceType: 'script' } }], isShowHistoryInputs: false, isShowHistoryTokenizeds: false, isShowHistoryParseds: false, nextId: 1 }, { type: 'input', value: 'var b ' });
        expect(state.historyTokenizeds[0].value.length).deep.equal(5);
        expect(state.historyTokenizeds[0].value[0].value).deep.equal('var');
        expect(state.historyTokenizeds[0].value[0].type).deep.equal('Keyword');
        expect(state.historyTokenizeds[0].value[1].value).deep.equal('a');
        expect(state.historyTokenizeds[0].value[1].type).deep.equal('Identifier');
        expect(state.historyTokenizeds[0].value[2].value).deep.equal('=');
        expect(state.historyTokenizeds[0].value[3].value).deep.equal('1');
        expect(state.historyTokenizeds[0].value[3].type).deep.equal('Numeric');
        expect(state.currentInput).deep.equal('var b ');
        state = reducer({ historyInputs: [{ id: 0, value: 'var a = 1;' }], currentInput: 'var b ', historyTokenizeds: [{ id: 0, value: [{ type: 'Keyword', value: 'var' }, { type: 'Identifier', value: 'a' }, { type: 'Punctuator', value: '=' }, { type: 'Numeric', value: '1' }, { type: 'Punctuator', value: ';' }] }], historyParseds: [{ id: 0, value: { type: 'Program', body: [{ type: 'VariableDeclaration', declarations: [{ type: 'VariableDeclarator', id: { type: 'Identifier', name: 'a' }, init: { type: 'Literal', value: 1, raw: '1' } }], kind: 'var' }], sourceType: 'script' } }], isShowHistoryInputs: false, isShowHistoryTokenizeds: false, isShowHistoryParseds: false, nextId: 1 }, { type: 'input', value: 'var b =' });
        expect(state.historyTokenizeds[0].value.length).deep.equal(5);
        expect(state.historyTokenizeds[0].value[0].value).deep.equal('var');
        expect(state.historyTokenizeds[0].value[0].type).deep.equal('Keyword');
        expect(state.historyTokenizeds[0].value[1].value).deep.equal('a');
        expect(state.historyTokenizeds[0].value[1].type).deep.equal('Identifier');
        expect(state.historyTokenizeds[0].value[2].value).deep.equal('=');
        expect(state.historyTokenizeds[0].value[3].value).deep.equal('1');
        expect(state.historyTokenizeds[0].value[3].type).deep.equal('Numeric');
        expect(state.currentInput).deep.equal('var b =');
        state = reducer({ historyInputs: [{ id: 0, value: 'var a = 1;' }], currentInput: 'var b =', historyTokenizeds: [{ id: 0, value: [{ type: 'Keyword', value: 'var' }, { type: 'Identifier', value: 'a' }, { type: 'Punctuator', value: '=' }, { type: 'Numeric', value: '1' }, { type: 'Punctuator', value: ';' }] }], historyParseds: [{ id: 0, value: { type: 'Program', body: [{ type: 'VariableDeclaration', declarations: [{ type: 'VariableDeclarator', id: { type: 'Identifier', name: 'a' }, init: { type: 'Literal', value: 1, raw: '1' } }], kind: 'var' }], sourceType: 'script' } }], isShowHistoryInputs: false, isShowHistoryTokenizeds: false, isShowHistoryParseds: false, nextId: 1 }, { type: 'input', value: 'var b = ' });
        expect(state.historyTokenizeds[0].value.length).deep.equal(5);
        expect(state.historyTokenizeds[0].value[0].value).deep.equal('var');
        expect(state.historyTokenizeds[0].value[0].type).deep.equal('Keyword');
        expect(state.historyTokenizeds[0].value[1].value).deep.equal('a');
        expect(state.historyTokenizeds[0].value[1].type).deep.equal('Identifier');
        expect(state.historyTokenizeds[0].value[2].value).deep.equal('=');
        expect(state.historyTokenizeds[0].value[3].value).deep.equal('1');
        expect(state.historyTokenizeds[0].value[3].type).deep.equal('Numeric');
        expect(state.currentInput).deep.equal('var b = ');
        state = reducer({ historyInputs: [{ id: 0, value: 'var a = 1;' }], currentInput: 'var b = ', historyTokenizeds: [{ id: 0, value: [{ type: 'Keyword', value: 'var' }, { type: 'Identifier', value: 'a' }, { type: 'Punctuator', value: '=' }, { type: 'Numeric', value: '1' }, { type: 'Punctuator', value: ';' }] }], historyParseds: [{ id: 0, value: { type: 'Program', body: [{ type: 'VariableDeclaration', declarations: [{ type: 'VariableDeclarator', id: { type: 'Identifier', name: 'a' }, init: { type: 'Literal', value: 1, raw: '1' } }], kind: 'var' }], sourceType: 'script' } }], isShowHistoryInputs: false, isShowHistoryTokenizeds: false, isShowHistoryParseds: false, nextId: 1 }, { type: 'input', value: 'var b = 2' });
        expect(state.historyTokenizeds[0].value.length).deep.equal(5);
        expect(state.historyTokenizeds[0].value[0].value).deep.equal('var');
        expect(state.historyTokenizeds[0].value[0].type).deep.equal('Keyword');
        expect(state.historyTokenizeds[0].value[1].value).deep.equal('a');
        expect(state.historyTokenizeds[0].value[1].type).deep.equal('Identifier');
        expect(state.historyTokenizeds[0].value[2].value).deep.equal('=');
        expect(state.historyTokenizeds[0].value[3].value).deep.equal('1');
        expect(state.historyTokenizeds[0].value[3].type).deep.equal('Numeric');
        expect(state.currentInput).deep.equal('var b = 2');
        state = reducer({ historyInputs: [{ id: 0, value: 'var a = 1;' }], currentInput: 'var b = 2', historyTokenizeds: [{ id: 0, value: [{ type: 'Keyword', value: 'var' }, { type: 'Identifier', value: 'a' }, { type: 'Punctuator', value: '=' }, { type: 'Numeric', value: '1' }, { type: 'Punctuator', value: ';' }] }], historyParseds: [{ id: 0, value: { type: 'Program', body: [{ type: 'VariableDeclaration', declarations: [{ type: 'VariableDeclarator', id: { type: 'Identifier', name: 'a' }, init: { type: 'Literal', value: 1, raw: '1' } }], kind: 'var' }], sourceType: 'script' } }], isShowHistoryInputs: false, isShowHistoryTokenizeds: false, isShowHistoryParseds: false, nextId: 1 }, { type: 'input', value: 'var b = 2;' });
        expect(state.historyTokenizeds[0].value.length).deep.equal(5);
        expect(state.historyTokenizeds[0].value[0].value).deep.equal('var');
        expect(state.historyTokenizeds[0].value[0].type).deep.equal('Keyword');
        expect(state.historyTokenizeds[0].value[1].value).deep.equal('a');
        expect(state.historyTokenizeds[0].value[1].type).deep.equal('Identifier');
        expect(state.historyTokenizeds[0].value[2].value).deep.equal('=');
        expect(state.historyTokenizeds[0].value[3].value).deep.equal('1');
        expect(state.historyTokenizeds[0].value[3].type).deep.equal('Numeric');
        expect(state.currentInput).deep.equal('var b = 2;');
        state = reducer({ historyInputs: [{ id: 0, value: 'var a = 1;' }], currentInput: 'var b = 2;', historyTokenizeds: [{ id: 0, value: [{ type: 'Keyword', value: 'var' }, { type: 'Identifier', value: 'a' }, { type: 'Punctuator', value: '=' }, { type: 'Numeric', value: '1' }, { type: 'Punctuator', value: ';' }] }], historyParseds: [{ id: 0, value: { type: 'Program', body: [{ type: 'VariableDeclaration', declarations: [{ type: 'VariableDeclarator', id: { type: 'Identifier', name: 'a' }, init: { type: 'Literal', value: 1, raw: '1' } }], kind: 'var' }], sourceType: 'script' } }], isShowHistoryInputs: false, isShowHistoryTokenizeds: false, isShowHistoryParseds: false, nextId: 1 }, { type: 'tokenize' });
        expect(state.nextId).deep.equal(2);
        expect(state.historyTokenizeds.length).deep.equal(2);
        expect(state.historyTokenizeds[1]).deep.equal({ value: [{ value: 'var', type: 'Keyword' }, { value: 'b', type: 'Identifier' }, { value: '=', type: 'Punctuator' }, { value: '2', type: 'Numeric' }, { value: ';', type: 'Punctuator' }], id: 1 });
        expect(state.historyTokenizeds[0].value.length).deep.equal(5);
        expect(state.historyTokenizeds[0].value[0].value).deep.equal('var');
        expect(state.historyTokenizeds[0].value[0].type).deep.equal('Keyword');
        expect(state.historyTokenizeds[0].value[1].value).deep.equal('a');
        expect(state.historyTokenizeds[0].value[1].type).deep.equal('Identifier');
        expect(state.historyTokenizeds[0].value[2].value).deep.equal('=');
        expect(state.historyTokenizeds[0].value[3].value).deep.equal('1');
        expect(state.historyTokenizeds[0].value[3].type).deep.equal('Numeric');
        expect(state.historyInputs.length).deep.equal(2);
        expect(state.historyInputs[1]).deep.equal({ value: 'var b = 2;', id: 1 });
        state = reducer({ historyInputs: [{ id: 0, value: 'var a = 1;' }, { id: 1, value: 'var b = 2;' }], currentInput: 'var b = 2;', historyTokenizeds: [{ id: 0, value: [{ type: 'Keyword', value: 'var' }, { type: 'Identifier', value: 'a' }, { type: 'Punctuator', value: '=' }, { type: 'Numeric', value: '1' }, { type: 'Punctuator', value: ';' }] }, { id: 1, value: [{ type: 'Keyword', value: 'var' }, { type: 'Identifier', value: 'b' }, { type: 'Punctuator', value: '=' }, { type: 'Numeric', value: '2' }, { type: 'Punctuator', value: ';' }] }], historyParseds: [{ id: 0, value: { type: 'Program', body: [{ type: 'VariableDeclaration', declarations: [{ type: 'VariableDeclarator', id: { type: 'Identifier', name: 'a' }, init: { type: 'Literal', value: 1, raw: '1' } }], kind: 'var' }], sourceType: 'script' } }], isShowHistoryInputs: false, isShowHistoryTokenizeds: false, isShowHistoryParseds: false, nextId: 2 }, { type: 'parse' });
        expect(state.historyParseds.length).deep.equal(2);
        expect(state.historyParseds[1]).deep.equal({ value: { sourceType: 'script', body: [{ kind: 'var', declarations: [{ init: { raw: '2', value: 2, type: 'Literal' }, id: { name: 'b', type: 'Identifier' }, type: 'VariableDeclarator' }], type: 'VariableDeclaration' }], type: 'Program' }, id: 1 });
        expect(state.historyTokenizeds[0].value.length).deep.equal(5);
        expect(state.historyTokenizeds[0].value[0].value).deep.equal('var');
        expect(state.historyTokenizeds[0].value[0].type).deep.equal('Keyword');
        expect(state.historyTokenizeds[0].value[1].value).deep.equal('a');
        expect(state.historyTokenizeds[0].value[1].type).deep.equal('Identifier');
        expect(state.historyTokenizeds[0].value[2].value).deep.equal('=');
        expect(state.historyTokenizeds[0].value[3].value).deep.equal('1');
        expect(state.historyTokenizeds[0].value[3].type).deep.equal('Numeric');
        expect(state.historyTokenizeds[1].value.length).deep.equal(5);
        expect(state.historyTokenizeds[1].value[0].value).deep.equal('var');
        expect(state.historyTokenizeds[1].value[0].type).deep.equal('Keyword');
        expect(state.historyTokenizeds[1].value[1].value).deep.equal('b');
        expect(state.historyTokenizeds[1].value[1].type).deep.equal('Identifier');
        expect(state.historyTokenizeds[1].value[2].value).deep.equal('=');
        expect(state.historyTokenizeds[1].value[3].value).deep.equal('2');
        expect(state.historyTokenizeds[1].value[3].type).deep.equal('Numeric');
    });
    it('should handle [input, tokenize, parse, input, tokenize, input, tokenize, parse]', () => {
        state = reducer({ historyInputs: [{ id: 0, value: 'var a = 1;' }], currentInput: 'var b = 2', historyTokenizeds: [{ id: 0, value: [{ type: 'Keyword', value: 'var' }, { type: 'Identifier', value: 'a' }, { type: 'Punctuator', value: '=' }, { type: 'Numeric', value: '1' }, { type: 'Punctuator', value: ';' }] }], historyParseds: [{ id: 0, value: { type: 'Program', body: [{ type: 'VariableDeclaration', declarations: [{ type: 'VariableDeclarator', id: { type: 'Identifier', name: 'a' }, init: { type: 'Literal', value: 1, raw: '1' } }], kind: 'var' }], sourceType: 'script' } }], isShowHistoryInputs: false, isShowHistoryTokenizeds: false, isShowHistoryParseds: false, nextId: 1 }, { type: 'input', value: 'var b = 2;' });
        expect(state.historyTokenizeds[0].value.length).deep.equal(5);
        expect(state.historyTokenizeds[0].value[0].value).deep.equal('var');
        expect(state.historyTokenizeds[0].value[0].type).deep.equal('Keyword');
        expect(state.historyTokenizeds[0].value[1].value).deep.equal('a');
        expect(state.historyTokenizeds[0].value[1].type).deep.equal('Identifier');
        expect(state.historyTokenizeds[0].value[2].value).deep.equal('=');
        expect(state.historyTokenizeds[0].value[3].value).deep.equal('1');
        expect(state.historyTokenizeds[0].value[3].type).deep.equal('Numeric');
        expect(state.currentInput).deep.equal('var b = 2;');
        state = reducer({ historyInputs: [{ id: 0, value: 'var a = 1;' }], currentInput: 'var b = 2;', historyTokenizeds: [{ id: 0, value: [{ type: 'Keyword', value: 'var' }, { type: 'Identifier', value: 'a' }, { type: 'Punctuator', value: '=' }, { type: 'Numeric', value: '1' }, { type: 'Punctuator', value: ';' }] }], historyParseds: [{ id: 0, value: { type: 'Program', body: [{ type: 'VariableDeclaration', declarations: [{ type: 'VariableDeclarator', id: { type: 'Identifier', name: 'a' }, init: { type: 'Literal', value: 1, raw: '1' } }], kind: 'var' }], sourceType: 'script' } }], isShowHistoryInputs: false, isShowHistoryTokenizeds: false, isShowHistoryParseds: false, nextId: 1 }, { type: 'tokenize' });
        expect(state.nextId).deep.equal(2);
        expect(state.historyTokenizeds.length).deep.equal(2);
        expect(state.historyTokenizeds[1]).deep.equal({ value: [{ value: 'var', type: 'Keyword' }, { value: 'b', type: 'Identifier' }, { value: '=', type: 'Punctuator' }, { value: '2', type: 'Numeric' }, { value: ';', type: 'Punctuator' }], id: 1 });
        expect(state.historyTokenizeds[0].value.length).deep.equal(5);
        expect(state.historyTokenizeds[0].value[0].value).deep.equal('var');
        expect(state.historyTokenizeds[0].value[0].type).deep.equal('Keyword');
        expect(state.historyTokenizeds[0].value[1].value).deep.equal('a');
        expect(state.historyTokenizeds[0].value[1].type).deep.equal('Identifier');
        expect(state.historyTokenizeds[0].value[2].value).deep.equal('=');
        expect(state.historyTokenizeds[0].value[3].value).deep.equal('1');
        expect(state.historyTokenizeds[0].value[3].type).deep.equal('Numeric');
        expect(state.historyInputs.length).deep.equal(2);
        expect(state.historyInputs[1]).deep.equal({ value: 'var b = 2;', id: 1 });
        state = reducer({ historyInputs: [{ id: 0, value: 'var a = 1;' }, { id: 1, value: 'var b = 2;' }], currentInput: 'var b = 2;', historyTokenizeds: [{ id: 0, value: [{ type: 'Keyword', value: 'var' }, { type: 'Identifier', value: 'a' }, { type: 'Punctuator', value: '=' }, { type: 'Numeric', value: '1' }, { type: 'Punctuator', value: ';' }] }, { id: 1, value: [{ type: 'Keyword', value: 'var' }, { type: 'Identifier', value: 'b' }, { type: 'Punctuator', value: '=' }, { type: 'Numeric', value: '2' }, { type: 'Punctuator', value: ';' }] }], historyParseds: [{ id: 0, value: { type: 'Program', body: [{ type: 'VariableDeclaration', declarations: [{ type: 'VariableDeclarator', id: { type: 'Identifier', name: 'a' }, init: { type: 'Literal', value: 1, raw: '1' } }], kind: 'var' }], sourceType: 'script' } }], isShowHistoryInputs: false, isShowHistoryTokenizeds: false, isShowHistoryParseds: false, nextId: 2 }, { type: 'parse' });
        expect(state.historyParseds.length).deep.equal(2);
        expect(state.historyParseds[1]).deep.equal({ value: { sourceType: 'script', body: [{ kind: 'var', declarations: [{ init: { raw: '2', value: 2, type: 'Literal' }, id: { name: 'b', type: 'Identifier' }, type: 'VariableDeclarator' }], type: 'VariableDeclaration' }], type: 'Program' }, id: 1 });
        expect(state.historyTokenizeds[0].value.length).deep.equal(5);
        expect(state.historyTokenizeds[0].value[0].value).deep.equal('var');
        expect(state.historyTokenizeds[0].value[0].type).deep.equal('Keyword');
        expect(state.historyTokenizeds[0].value[1].value).deep.equal('a');
        expect(state.historyTokenizeds[0].value[1].type).deep.equal('Identifier');
        expect(state.historyTokenizeds[0].value[2].value).deep.equal('=');
        expect(state.historyTokenizeds[0].value[3].value).deep.equal('1');
        expect(state.historyTokenizeds[0].value[3].type).deep.equal('Numeric');
        expect(state.historyTokenizeds[1].value.length).deep.equal(5);
        expect(state.historyTokenizeds[1].value[0].value).deep.equal('var');
        expect(state.historyTokenizeds[1].value[0].type).deep.equal('Keyword');
        expect(state.historyTokenizeds[1].value[1].value).deep.equal('b');
        expect(state.historyTokenizeds[1].value[1].type).deep.equal('Identifier');
        expect(state.historyTokenizeds[1].value[2].value).deep.equal('=');
        expect(state.historyTokenizeds[1].value[3].value).deep.equal('2');
        expect(state.historyTokenizeds[1].value[3].type).deep.equal('Numeric');
        state = reducer({ historyInputs: [{ id: 0, value: 'var a = 1;' }, { id: 1, value: 'var b = 2;' }], currentInput: 'var b = 2;', historyTokenizeds: [{ id: 0, value: [{ type: 'Keyword', value: 'var' }, { type: 'Identifier', value: 'a' }, { type: 'Punctuator', value: '=' }, { type: 'Numeric', value: '1' }, { type: 'Punctuator', value: ';' }] }, { id: 1, value: [{ type: 'Keyword', value: 'var' }, { type: 'Identifier', value: 'b' }, { type: 'Punctuator', value: '=' }, { type: 'Numeric', value: '2' }, { type: 'Punctuator', value: ';' }] }], historyParseds: [{ id: 0, value: { type: 'Program', body: [{ type: 'VariableDeclaration', declarations: [{ type: 'VariableDeclarator', id: { type: 'Identifier', name: 'a' }, init: { type: 'Literal', value: 1, raw: '1' } }], kind: 'var' }], sourceType: 'script' } }, { id: 1, value: { type: 'Program', body: [{ type: 'VariableDeclaration', declarations: [{ type: 'VariableDeclarator', id: { type: 'Identifier', name: 'b' }, init: { type: 'Literal', value: 2, raw: '2' } }], kind: 'var' }], sourceType: 'script' } }], isShowHistoryInputs: false, isShowHistoryTokenizeds: false, isShowHistoryParseds: false, nextId: 2 }, { type: 'input', value: 'var  = 2;' });
        expect(state.historyTokenizeds[0].value.length).deep.equal(5);
        expect(state.historyTokenizeds[0].value[0].value).deep.equal('var');
        expect(state.historyTokenizeds[0].value[0].type).deep.equal('Keyword');
        expect(state.historyTokenizeds[0].value[1].value).deep.equal('a');
        expect(state.historyTokenizeds[0].value[1].type).deep.equal('Identifier');
        expect(state.historyTokenizeds[0].value[2].value).deep.equal('=');
        expect(state.historyTokenizeds[0].value[3].value).deep.equal('1');
        expect(state.historyTokenizeds[0].value[3].type).deep.equal('Numeric');
        expect(state.historyTokenizeds[1].value.length).deep.equal(5);
        expect(state.historyTokenizeds[1].value[0].value).deep.equal('var');
        expect(state.historyTokenizeds[1].value[0].type).deep.equal('Keyword');
        expect(state.historyTokenizeds[1].value[1].value).deep.equal('b');
        expect(state.historyTokenizeds[1].value[1].type).deep.equal('Identifier');
        expect(state.historyTokenizeds[1].value[2].value).deep.equal('=');
        expect(state.historyTokenizeds[1].value[3].value).deep.equal('2');
        expect(state.historyTokenizeds[1].value[3].type).deep.equal('Numeric');
        expect(state.currentInput).deep.equal('var  = 2;');
        state = reducer({ historyInputs: [{ id: 0, value: 'var a = 1;' }, { id: 1, value: 'var b = 2;' }], currentInput: 'var  = 2;', historyTokenizeds: [{ id: 0, value: [{ type: 'Keyword', value: 'var' }, { type: 'Identifier', value: 'a' }, { type: 'Punctuator', value: '=' }, { type: 'Numeric', value: '1' }, { type: 'Punctuator', value: ';' }] }, { id: 1, value: [{ type: 'Keyword', value: 'var' }, { type: 'Identifier', value: 'b' }, { type: 'Punctuator', value: '=' }, { type: 'Numeric', value: '2' }, { type: 'Punctuator', value: ';' }] }], historyParseds: [{ id: 0, value: { type: 'Program', body: [{ type: 'VariableDeclaration', declarations: [{ type: 'VariableDeclarator', id: { type: 'Identifier', name: 'a' }, init: { type: 'Literal', value: 1, raw: '1' } }], kind: 'var' }], sourceType: 'script' } }, { id: 1, value: { type: 'Program', body: [{ type: 'VariableDeclaration', declarations: [{ type: 'VariableDeclarator', id: { type: 'Identifier', name: 'b' }, init: { type: 'Literal', value: 2, raw: '2' } }], kind: 'var' }], sourceType: 'script' } }], isShowHistoryInputs: false, isShowHistoryTokenizeds: false, isShowHistoryParseds: false, nextId: 2 }, { type: 'input', value: 'var c = 2;' });
        expect(state.historyTokenizeds[0].value.length).deep.equal(5);
        expect(state.historyTokenizeds[0].value[0].value).deep.equal('var');
        expect(state.historyTokenizeds[0].value[0].type).deep.equal('Keyword');
        expect(state.historyTokenizeds[0].value[1].value).deep.equal('a');
        expect(state.historyTokenizeds[0].value[1].type).deep.equal('Identifier');
        expect(state.historyTokenizeds[0].value[2].value).deep.equal('=');
        expect(state.historyTokenizeds[0].value[3].value).deep.equal('1');
        expect(state.historyTokenizeds[0].value[3].type).deep.equal('Numeric');
        expect(state.historyTokenizeds[1].value.length).deep.equal(5);
        expect(state.historyTokenizeds[1].value[0].value).deep.equal('var');
        expect(state.historyTokenizeds[1].value[0].type).deep.equal('Keyword');
        expect(state.historyTokenizeds[1].value[1].value).deep.equal('b');
        expect(state.historyTokenizeds[1].value[1].type).deep.equal('Identifier');
        expect(state.historyTokenizeds[1].value[2].value).deep.equal('=');
        expect(state.historyTokenizeds[1].value[3].value).deep.equal('2');
        expect(state.historyTokenizeds[1].value[3].type).deep.equal('Numeric');
        expect(state.currentInput).deep.equal('var c = 2;');
        state = reducer({ historyInputs: [{ id: 0, value: 'var a = 1;' }, { id: 1, value: 'var b = 2;' }], currentInput: 'var c = 2;', historyTokenizeds: [{ id: 0, value: [{ type: 'Keyword', value: 'var' }, { type: 'Identifier', value: 'a' }, { type: 'Punctuator', value: '=' }, { type: 'Numeric', value: '1' }, { type: 'Punctuator', value: ';' }] }, { id: 1, value: [{ type: 'Keyword', value: 'var' }, { type: 'Identifier', value: 'b' }, { type: 'Punctuator', value: '=' }, { type: 'Numeric', value: '2' }, { type: 'Punctuator', value: ';' }] }], historyParseds: [{ id: 0, value: { type: 'Program', body: [{ type: 'VariableDeclaration', declarations: [{ type: 'VariableDeclarator', id: { type: 'Identifier', name: 'a' }, init: { type: 'Literal', value: 1, raw: '1' } }], kind: 'var' }], sourceType: 'script' } }, { id: 1, value: { type: 'Program', body: [{ type: 'VariableDeclaration', declarations: [{ type: 'VariableDeclarator', id: { type: 'Identifier', name: 'b' }, init: { type: 'Literal', value: 2, raw: '2' } }], kind: 'var' }], sourceType: 'script' } }], isShowHistoryInputs: false, isShowHistoryTokenizeds: false, isShowHistoryParseds: false, nextId: 2 }, { type: 'input', value: 'var c = ;' });
        expect(state.historyTokenizeds[0].value.length).deep.equal(5);
        expect(state.historyTokenizeds[0].value[0].value).deep.equal('var');
        expect(state.historyTokenizeds[0].value[0].type).deep.equal('Keyword');
        expect(state.historyTokenizeds[0].value[1].value).deep.equal('a');
        expect(state.historyTokenizeds[0].value[1].type).deep.equal('Identifier');
        expect(state.historyTokenizeds[0].value[2].value).deep.equal('=');
        expect(state.historyTokenizeds[0].value[3].value).deep.equal('1');
        expect(state.historyTokenizeds[0].value[3].type).deep.equal('Numeric');
        expect(state.historyTokenizeds[1].value.length).deep.equal(5);
        expect(state.historyTokenizeds[1].value[0].value).deep.equal('var');
        expect(state.historyTokenizeds[1].value[0].type).deep.equal('Keyword');
        expect(state.historyTokenizeds[1].value[1].value).deep.equal('b');
        expect(state.historyTokenizeds[1].value[1].type).deep.equal('Identifier');
        expect(state.historyTokenizeds[1].value[2].value).deep.equal('=');
        expect(state.historyTokenizeds[1].value[3].value).deep.equal('2');
        expect(state.historyTokenizeds[1].value[3].type).deep.equal('Numeric');
        expect(state.currentInput).deep.equal('var c = ;');
        state = reducer({ historyInputs: [{ id: 0, value: 'var a = 1;' }, { id: 1, value: 'var b = 2;' }], currentInput: 'var c = ;', historyTokenizeds: [{ id: 0, value: [{ type: 'Keyword', value: 'var' }, { type: 'Identifier', value: 'a' }, { type: 'Punctuator', value: '=' }, { type: 'Numeric', value: '1' }, { type: 'Punctuator', value: ';' }] }, { id: 1, value: [{ type: 'Keyword', value: 'var' }, { type: 'Identifier', value: 'b' }, { type: 'Punctuator', value: '=' }, { type: 'Numeric', value: '2' }, { type: 'Punctuator', value: ';' }] }], historyParseds: [{ id: 0, value: { type: 'Program', body: [{ type: 'VariableDeclaration', declarations: [{ type: 'VariableDeclarator', id: { type: 'Identifier', name: 'a' }, init: { type: 'Literal', value: 1, raw: '1' } }], kind: 'var' }], sourceType: 'script' } }, { id: 1, value: { type: 'Program', body: [{ type: 'VariableDeclaration', declarations: [{ type: 'VariableDeclarator', id: { type: 'Identifier', name: 'b' }, init: { type: 'Literal', value: 2, raw: '2' } }], kind: 'var' }], sourceType: 'script' } }], isShowHistoryInputs: false, isShowHistoryTokenizeds: false, isShowHistoryParseds: false, nextId: 2 }, { type: 'input', value: 'var c = 3;' });
        expect(state.historyTokenizeds[0].value.length).deep.equal(5);
        expect(state.historyTokenizeds[0].value[0].value).deep.equal('var');
        expect(state.historyTokenizeds[0].value[0].type).deep.equal('Keyword');
        expect(state.historyTokenizeds[0].value[1].value).deep.equal('a');
        expect(state.historyTokenizeds[0].value[1].type).deep.equal('Identifier');
        expect(state.historyTokenizeds[0].value[2].value).deep.equal('=');
        expect(state.historyTokenizeds[0].value[3].value).deep.equal('1');
        expect(state.historyTokenizeds[0].value[3].type).deep.equal('Numeric');
        expect(state.historyTokenizeds[1].value.length).deep.equal(5);
        expect(state.historyTokenizeds[1].value[0].value).deep.equal('var');
        expect(state.historyTokenizeds[1].value[0].type).deep.equal('Keyword');
        expect(state.historyTokenizeds[1].value[1].value).deep.equal('b');
        expect(state.historyTokenizeds[1].value[1].type).deep.equal('Identifier');
        expect(state.historyTokenizeds[1].value[2].value).deep.equal('=');
        expect(state.historyTokenizeds[1].value[3].value).deep.equal('2');
        expect(state.historyTokenizeds[1].value[3].type).deep.equal('Numeric');
        expect(state.currentInput).deep.equal('var c = 3;');
        state = reducer({ historyInputs: [{ id: 0, value: 'var a = 1;' }, { id: 1, value: 'var b = 2;' }], currentInput: 'var c = 3;', historyTokenizeds: [{ id: 0, value: [{ type: 'Keyword', value: 'var' }, { type: 'Identifier', value: 'a' }, { type: 'Punctuator', value: '=' }, { type: 'Numeric', value: '1' }, { type: 'Punctuator', value: ';' }] }, { id: 1, value: [{ type: 'Keyword', value: 'var' }, { type: 'Identifier', value: 'b' }, { type: 'Punctuator', value: '=' }, { type: 'Numeric', value: '2' }, { type: 'Punctuator', value: ';' }] }], historyParseds: [{ id: 0, value: { type: 'Program', body: [{ type: 'VariableDeclaration', declarations: [{ type: 'VariableDeclarator', id: { type: 'Identifier', name: 'a' }, init: { type: 'Literal', value: 1, raw: '1' } }], kind: 'var' }], sourceType: 'script' } }, { id: 1, value: { type: 'Program', body: [{ type: 'VariableDeclaration', declarations: [{ type: 'VariableDeclarator', id: { type: 'Identifier', name: 'b' }, init: { type: 'Literal', value: 2, raw: '2' } }], kind: 'var' }], sourceType: 'script' } }], isShowHistoryInputs: false, isShowHistoryTokenizeds: false, isShowHistoryParseds: false, nextId: 2 }, { type: 'tokenize' });
        expect(state.nextId).deep.equal(3);
        expect(state.historyTokenizeds.length).deep.equal(3);
        expect(state.historyTokenizeds[2]).deep.equal({ value: [{ value: 'var', type: 'Keyword' }, { value: 'c', type: 'Identifier' }, { value: '=', type: 'Punctuator' }, { value: '3', type: 'Numeric' }, { value: ';', type: 'Punctuator' }], id: 2 });
        expect(state.historyTokenizeds[0].value.length).deep.equal(5);
        expect(state.historyTokenizeds[0].value[0].value).deep.equal('var');
        expect(state.historyTokenizeds[0].value[0].type).deep.equal('Keyword');
        expect(state.historyTokenizeds[0].value[1].value).deep.equal('a');
        expect(state.historyTokenizeds[0].value[1].type).deep.equal('Identifier');
        expect(state.historyTokenizeds[0].value[2].value).deep.equal('=');
        expect(state.historyTokenizeds[0].value[3].value).deep.equal('1');
        expect(state.historyTokenizeds[0].value[3].type).deep.equal('Numeric');
        expect(state.historyTokenizeds[1].value.length).deep.equal(5);
        expect(state.historyTokenizeds[1].value[0].value).deep.equal('var');
        expect(state.historyTokenizeds[1].value[0].type).deep.equal('Keyword');
        expect(state.historyTokenizeds[1].value[1].value).deep.equal('b');
        expect(state.historyTokenizeds[1].value[1].type).deep.equal('Identifier');
        expect(state.historyTokenizeds[1].value[2].value).deep.equal('=');
        expect(state.historyTokenizeds[1].value[3].value).deep.equal('2');
        expect(state.historyTokenizeds[1].value[3].type).deep.equal('Numeric');
        expect(state.historyInputs.length).deep.equal(3);
        expect(state.historyInputs[2]).deep.equal({ value: 'var c = 3;', id: 2 });
        state = reducer({ historyInputs: [{ id: 0, value: 'var a = 1;' }, { id: 1, value: 'var b = 2;' }, { id: 2, value: 'var c = 3;' }], currentInput: 'var c = 3;', historyTokenizeds: [{ id: 0, value: [{ type: 'Keyword', value: 'var' }, { type: 'Identifier', value: 'a' }, { type: 'Punctuator', value: '=' }, { type: 'Numeric', value: '1' }, { type: 'Punctuator', value: ';' }] }, { id: 1, value: [{ type: 'Keyword', value: 'var' }, { type: 'Identifier', value: 'b' }, { type: 'Punctuator', value: '=' }, { type: 'Numeric', value: '2' }, { type: 'Punctuator', value: ';' }] }, { id: 2, value: [{ type: 'Keyword', value: 'var' }, { type: 'Identifier', value: 'c' }, { type: 'Punctuator', value: '=' }, { type: 'Numeric', value: '3' }, { type: 'Punctuator', value: ';' }] }], historyParseds: [{ id: 0, value: { type: 'Program', body: [{ type: 'VariableDeclaration', declarations: [{ type: 'VariableDeclarator', id: { type: 'Identifier', name: 'a' }, init: { type: 'Literal', value: 1, raw: '1' } }], kind: 'var' }], sourceType: 'script' } }, { id: 1, value: { type: 'Program', body: [{ type: 'VariableDeclaration', declarations: [{ type: 'VariableDeclarator', id: { type: 'Identifier', name: 'b' }, init: { type: 'Literal', value: 2, raw: '2' } }], kind: 'var' }], sourceType: 'script' } }], isShowHistoryInputs: false, isShowHistoryTokenizeds: false, isShowHistoryParseds: false, nextId: 3 }, { type: 'input', value: 'var  = 3;' });
        expect(state.historyTokenizeds[0].value.length).deep.equal(5);
        expect(state.historyTokenizeds[0].value[0].value).deep.equal('var');
        expect(state.historyTokenizeds[0].value[0].type).deep.equal('Keyword');
        expect(state.historyTokenizeds[0].value[1].value).deep.equal('a');
        expect(state.historyTokenizeds[0].value[1].type).deep.equal('Identifier');
        expect(state.historyTokenizeds[0].value[2].value).deep.equal('=');
        expect(state.historyTokenizeds[0].value[3].value).deep.equal('1');
        expect(state.historyTokenizeds[0].value[3].type).deep.equal('Numeric');
        expect(state.historyTokenizeds[1].value.length).deep.equal(5);
        expect(state.historyTokenizeds[1].value[0].value).deep.equal('var');
        expect(state.historyTokenizeds[1].value[0].type).deep.equal('Keyword');
        expect(state.historyTokenizeds[1].value[1].value).deep.equal('b');
        expect(state.historyTokenizeds[1].value[1].type).deep.equal('Identifier');
        expect(state.historyTokenizeds[1].value[2].value).deep.equal('=');
        expect(state.historyTokenizeds[1].value[3].value).deep.equal('2');
        expect(state.historyTokenizeds[1].value[3].type).deep.equal('Numeric');
        expect(state.historyTokenizeds[2].value.length).deep.equal(5);
        expect(state.historyTokenizeds[2].value[0].value).deep.equal('var');
        expect(state.historyTokenizeds[2].value[0].type).deep.equal('Keyword');
        expect(state.historyTokenizeds[2].value[1].value).deep.equal('c');
        expect(state.historyTokenizeds[2].value[1].type).deep.equal('Identifier');
        expect(state.historyTokenizeds[2].value[2].value).deep.equal('=');
        expect(state.historyTokenizeds[2].value[3].value).deep.equal('3');
        expect(state.historyTokenizeds[2].value[3].type).deep.equal('Numeric');
        expect(state.currentInput).deep.equal('var  = 3;');
        state = reducer({ historyInputs: [{ id: 0, value: 'var a = 1;' }, { id: 1, value: 'var b = 2;' }, { id: 2, value: 'var c = 3;' }], currentInput: 'var  = 3;', historyTokenizeds: [{ id: 0, value: [{ type: 'Keyword', value: 'var' }, { type: 'Identifier', value: 'a' }, { type: 'Punctuator', value: '=' }, { type: 'Numeric', value: '1' }, { type: 'Punctuator', value: ';' }] }, { id: 1, value: [{ type: 'Keyword', value: 'var' }, { type: 'Identifier', value: 'b' }, { type: 'Punctuator', value: '=' }, { type: 'Numeric', value: '2' }, { type: 'Punctuator', value: ';' }] }, { id: 2, value: [{ type: 'Keyword', value: 'var' }, { type: 'Identifier', value: 'c' }, { type: 'Punctuator', value: '=' }, { type: 'Numeric', value: '3' }, { type: 'Punctuator', value: ';' }] }], historyParseds: [{ id: 0, value: { type: 'Program', body: [{ type: 'VariableDeclaration', declarations: [{ type: 'VariableDeclarator', id: { type: 'Identifier', name: 'a' }, init: { type: 'Literal', value: 1, raw: '1' } }], kind: 'var' }], sourceType: 'script' } }, { id: 1, value: { type: 'Program', body: [{ type: 'VariableDeclaration', declarations: [{ type: 'VariableDeclarator', id: { type: 'Identifier', name: 'b' }, init: { type: 'Literal', value: 2, raw: '2' } }], kind: 'var' }], sourceType: 'script' } }], isShowHistoryInputs: false, isShowHistoryTokenizeds: false, isShowHistoryParseds: false, nextId: 3 }, { type: 'input', value: 'var d = 3;' });
        expect(state.historyTokenizeds[0].value.length).deep.equal(5);
        expect(state.historyTokenizeds[0].value[0].value).deep.equal('var');
        expect(state.historyTokenizeds[0].value[0].type).deep.equal('Keyword');
        expect(state.historyTokenizeds[0].value[1].value).deep.equal('a');
        expect(state.historyTokenizeds[0].value[1].type).deep.equal('Identifier');
        expect(state.historyTokenizeds[0].value[2].value).deep.equal('=');
        expect(state.historyTokenizeds[0].value[3].value).deep.equal('1');
        expect(state.historyTokenizeds[0].value[3].type).deep.equal('Numeric');
        expect(state.historyTokenizeds[1].value.length).deep.equal(5);
        expect(state.historyTokenizeds[1].value[0].value).deep.equal('var');
        expect(state.historyTokenizeds[1].value[0].type).deep.equal('Keyword');
        expect(state.historyTokenizeds[1].value[1].value).deep.equal('b');
        expect(state.historyTokenizeds[1].value[1].type).deep.equal('Identifier');
        expect(state.historyTokenizeds[1].value[2].value).deep.equal('=');
        expect(state.historyTokenizeds[1].value[3].value).deep.equal('2');
        expect(state.historyTokenizeds[1].value[3].type).deep.equal('Numeric');
        expect(state.historyTokenizeds[2].value.length).deep.equal(5);
        expect(state.historyTokenizeds[2].value[0].value).deep.equal('var');
        expect(state.historyTokenizeds[2].value[0].type).deep.equal('Keyword');
        expect(state.historyTokenizeds[2].value[1].value).deep.equal('c');
        expect(state.historyTokenizeds[2].value[1].type).deep.equal('Identifier');
        expect(state.historyTokenizeds[2].value[2].value).deep.equal('=');
        expect(state.historyTokenizeds[2].value[3].value).deep.equal('3');
        expect(state.historyTokenizeds[2].value[3].type).deep.equal('Numeric');
        expect(state.currentInput).deep.equal('var d = 3;');
        state = reducer({ historyInputs: [{ id: 0, value: 'var a = 1;' }, { id: 1, value: 'var b = 2;' }, { id: 2, value: 'var c = 3;' }], currentInput: 'var d = 3;', historyTokenizeds: [{ id: 0, value: [{ type: 'Keyword', value: 'var' }, { type: 'Identifier', value: 'a' }, { type: 'Punctuator', value: '=' }, { type: 'Numeric', value: '1' }, { type: 'Punctuator', value: ';' }] }, { id: 1, value: [{ type: 'Keyword', value: 'var' }, { type: 'Identifier', value: 'b' }, { type: 'Punctuator', value: '=' }, { type: 'Numeric', value: '2' }, { type: 'Punctuator', value: ';' }] }, { id: 2, value: [{ type: 'Keyword', value: 'var' }, { type: 'Identifier', value: 'c' }, { type: 'Punctuator', value: '=' }, { type: 'Numeric', value: '3' }, { type: 'Punctuator', value: ';' }] }], historyParseds: [{ id: 0, value: { type: 'Program', body: [{ type: 'VariableDeclaration', declarations: [{ type: 'VariableDeclarator', id: { type: 'Identifier', name: 'a' }, init: { type: 'Literal', value: 1, raw: '1' } }], kind: 'var' }], sourceType: 'script' } }, { id: 1, value: { type: 'Program', body: [{ type: 'VariableDeclaration', declarations: [{ type: 'VariableDeclarator', id: { type: 'Identifier', name: 'b' }, init: { type: 'Literal', value: 2, raw: '2' } }], kind: 'var' }], sourceType: 'script' } }], isShowHistoryInputs: false, isShowHistoryTokenizeds: false, isShowHistoryParseds: false, nextId: 3 }, { type: 'input', value: 'var d = ;' });
        expect(state.historyTokenizeds[0].value.length).deep.equal(5);
        expect(state.historyTokenizeds[0].value[0].value).deep.equal('var');
        expect(state.historyTokenizeds[0].value[0].type).deep.equal('Keyword');
        expect(state.historyTokenizeds[0].value[1].value).deep.equal('a');
        expect(state.historyTokenizeds[0].value[1].type).deep.equal('Identifier');
        expect(state.historyTokenizeds[0].value[2].value).deep.equal('=');
        expect(state.historyTokenizeds[0].value[3].value).deep.equal('1');
        expect(state.historyTokenizeds[0].value[3].type).deep.equal('Numeric');
        expect(state.historyTokenizeds[1].value.length).deep.equal(5);
        expect(state.historyTokenizeds[1].value[0].value).deep.equal('var');
        expect(state.historyTokenizeds[1].value[0].type).deep.equal('Keyword');
        expect(state.historyTokenizeds[1].value[1].value).deep.equal('b');
        expect(state.historyTokenizeds[1].value[1].type).deep.equal('Identifier');
        expect(state.historyTokenizeds[1].value[2].value).deep.equal('=');
        expect(state.historyTokenizeds[1].value[3].value).deep.equal('2');
        expect(state.historyTokenizeds[1].value[3].type).deep.equal('Numeric');
        expect(state.historyTokenizeds[2].value.length).deep.equal(5);
        expect(state.historyTokenizeds[2].value[0].value).deep.equal('var');
        expect(state.historyTokenizeds[2].value[0].type).deep.equal('Keyword');
        expect(state.historyTokenizeds[2].value[1].value).deep.equal('c');
        expect(state.historyTokenizeds[2].value[1].type).deep.equal('Identifier');
        expect(state.historyTokenizeds[2].value[2].value).deep.equal('=');
        expect(state.historyTokenizeds[2].value[3].value).deep.equal('3');
        expect(state.historyTokenizeds[2].value[3].type).deep.equal('Numeric');
        expect(state.currentInput).deep.equal('var d = ;');
        state = reducer({ historyInputs: [{ id: 0, value: 'var a = 1;' }, { id: 1, value: 'var b = 2;' }, { id: 2, value: 'var c = 3;' }], currentInput: 'var d = ;', historyTokenizeds: [{ id: 0, value: [{ type: 'Keyword', value: 'var' }, { type: 'Identifier', value: 'a' }, { type: 'Punctuator', value: '=' }, { type: 'Numeric', value: '1' }, { type: 'Punctuator', value: ';' }] }, { id: 1, value: [{ type: 'Keyword', value: 'var' }, { type: 'Identifier', value: 'b' }, { type: 'Punctuator', value: '=' }, { type: 'Numeric', value: '2' }, { type: 'Punctuator', value: ';' }] }, { id: 2, value: [{ type: 'Keyword', value: 'var' }, { type: 'Identifier', value: 'c' }, { type: 'Punctuator', value: '=' }, { type: 'Numeric', value: '3' }, { type: 'Punctuator', value: ';' }] }], historyParseds: [{ id: 0, value: { type: 'Program', body: [{ type: 'VariableDeclaration', declarations: [{ type: 'VariableDeclarator', id: { type: 'Identifier', name: 'a' }, init: { type: 'Literal', value: 1, raw: '1' } }], kind: 'var' }], sourceType: 'script' } }, { id: 1, value: { type: 'Program', body: [{ type: 'VariableDeclaration', declarations: [{ type: 'VariableDeclarator', id: { type: 'Identifier', name: 'b' }, init: { type: 'Literal', value: 2, raw: '2' } }], kind: 'var' }], sourceType: 'script' } }], isShowHistoryInputs: false, isShowHistoryTokenizeds: false, isShowHistoryParseds: false, nextId: 3 }, { type: 'input', value: 'var d = 4;' });
        expect(state.historyTokenizeds[0].value.length).deep.equal(5);
        expect(state.historyTokenizeds[0].value[0].value).deep.equal('var');
        expect(state.historyTokenizeds[0].value[0].type).deep.equal('Keyword');
        expect(state.historyTokenizeds[0].value[1].value).deep.equal('a');
        expect(state.historyTokenizeds[0].value[1].type).deep.equal('Identifier');
        expect(state.historyTokenizeds[0].value[2].value).deep.equal('=');
        expect(state.historyTokenizeds[0].value[3].value).deep.equal('1');
        expect(state.historyTokenizeds[0].value[3].type).deep.equal('Numeric');
        expect(state.historyTokenizeds[1].value.length).deep.equal(5);
        expect(state.historyTokenizeds[1].value[0].value).deep.equal('var');
        expect(state.historyTokenizeds[1].value[0].type).deep.equal('Keyword');
        expect(state.historyTokenizeds[1].value[1].value).deep.equal('b');
        expect(state.historyTokenizeds[1].value[1].type).deep.equal('Identifier');
        expect(state.historyTokenizeds[1].value[2].value).deep.equal('=');
        expect(state.historyTokenizeds[1].value[3].value).deep.equal('2');
        expect(state.historyTokenizeds[1].value[3].type).deep.equal('Numeric');
        expect(state.historyTokenizeds[2].value.length).deep.equal(5);
        expect(state.historyTokenizeds[2].value[0].value).deep.equal('var');
        expect(state.historyTokenizeds[2].value[0].type).deep.equal('Keyword');
        expect(state.historyTokenizeds[2].value[1].value).deep.equal('c');
        expect(state.historyTokenizeds[2].value[1].type).deep.equal('Identifier');
        expect(state.historyTokenizeds[2].value[2].value).deep.equal('=');
        expect(state.historyTokenizeds[2].value[3].value).deep.equal('3');
        expect(state.historyTokenizeds[2].value[3].type).deep.equal('Numeric');
        expect(state.currentInput).deep.equal('var d = 4;');
        state = reducer({ historyInputs: [{ id: 0, value: 'var a = 1;' }, { id: 1, value: 'var b = 2;' }, { id: 2, value: 'var c = 3;' }], currentInput: 'var d = 4;', historyTokenizeds: [{ id: 0, value: [{ type: 'Keyword', value: 'var' }, { type: 'Identifier', value: 'a' }, { type: 'Punctuator', value: '=' }, { type: 'Numeric', value: '1' }, { type: 'Punctuator', value: ';' }] }, { id: 1, value: [{ type: 'Keyword', value: 'var' }, { type: 'Identifier', value: 'b' }, { type: 'Punctuator', value: '=' }, { type: 'Numeric', value: '2' }, { type: 'Punctuator', value: ';' }] }, { id: 2, value: [{ type: 'Keyword', value: 'var' }, { type: 'Identifier', value: 'c' }, { type: 'Punctuator', value: '=' }, { type: 'Numeric', value: '3' }, { type: 'Punctuator', value: ';' }] }], historyParseds: [{ id: 0, value: { type: 'Program', body: [{ type: 'VariableDeclaration', declarations: [{ type: 'VariableDeclarator', id: { type: 'Identifier', name: 'a' }, init: { type: 'Literal', value: 1, raw: '1' } }], kind: 'var' }], sourceType: 'script' } }, { id: 1, value: { type: 'Program', body: [{ type: 'VariableDeclaration', declarations: [{ type: 'VariableDeclarator', id: { type: 'Identifier', name: 'b' }, init: { type: 'Literal', value: 2, raw: '2' } }], kind: 'var' }], sourceType: 'script' } }], isShowHistoryInputs: false, isShowHistoryTokenizeds: false, isShowHistoryParseds: false, nextId: 3 }, { type: 'tokenize' });
        expect(state.nextId).deep.equal(4);
        expect(state.historyTokenizeds.length).deep.equal(4);
        expect(state.historyTokenizeds[3]).deep.equal({ value: [{ value: 'var', type: 'Keyword' }, { value: 'd', type: 'Identifier' }, { value: '=', type: 'Punctuator' }, { value: '4', type: 'Numeric' }, { value: ';', type: 'Punctuator' }], id: 3 });
        expect(state.historyTokenizeds[0].value.length).deep.equal(5);
        expect(state.historyTokenizeds[0].value[0].value).deep.equal('var');
        expect(state.historyTokenizeds[0].value[0].type).deep.equal('Keyword');
        expect(state.historyTokenizeds[0].value[1].value).deep.equal('a');
        expect(state.historyTokenizeds[0].value[1].type).deep.equal('Identifier');
        expect(state.historyTokenizeds[0].value[2].value).deep.equal('=');
        expect(state.historyTokenizeds[0].value[3].value).deep.equal('1');
        expect(state.historyTokenizeds[0].value[3].type).deep.equal('Numeric');
        expect(state.historyTokenizeds[1].value.length).deep.equal(5);
        expect(state.historyTokenizeds[1].value[0].value).deep.equal('var');
        expect(state.historyTokenizeds[1].value[0].type).deep.equal('Keyword');
        expect(state.historyTokenizeds[1].value[1].value).deep.equal('b');
        expect(state.historyTokenizeds[1].value[1].type).deep.equal('Identifier');
        expect(state.historyTokenizeds[1].value[2].value).deep.equal('=');
        expect(state.historyTokenizeds[1].value[3].value).deep.equal('2');
        expect(state.historyTokenizeds[1].value[3].type).deep.equal('Numeric');
        expect(state.historyTokenizeds[2].value.length).deep.equal(5);
        expect(state.historyTokenizeds[2].value[0].value).deep.equal('var');
        expect(state.historyTokenizeds[2].value[0].type).deep.equal('Keyword');
        expect(state.historyTokenizeds[2].value[1].value).deep.equal('c');
        expect(state.historyTokenizeds[2].value[1].type).deep.equal('Identifier');
        expect(state.historyTokenizeds[2].value[2].value).deep.equal('=');
        expect(state.historyTokenizeds[2].value[3].value).deep.equal('3');
        expect(state.historyTokenizeds[2].value[3].type).deep.equal('Numeric');
        expect(state.historyInputs.length).deep.equal(4);
        expect(state.historyInputs[3]).deep.equal({ value: 'var d = 4;', id: 3 });
        state = reducer({ historyInputs: [{ id: 0, value: 'var a = 1;' }, { id: 1, value: 'var b = 2;' }, { id: 2, value: 'var c = 3;' }, { id: 3, value: 'var d = 4;' }], currentInput: 'var d = 4;', historyTokenizeds: [{ id: 0, value: [{ type: 'Keyword', value: 'var' }, { type: 'Identifier', value: 'a' }, { type: 'Punctuator', value: '=' }, { type: 'Numeric', value: '1' }, { type: 'Punctuator', value: ';' }] }, { id: 1, value: [{ type: 'Keyword', value: 'var' }, { type: 'Identifier', value: 'b' }, { type: 'Punctuator', value: '=' }, { type: 'Numeric', value: '2' }, { type: 'Punctuator', value: ';' }] }, { id: 2, value: [{ type: 'Keyword', value: 'var' }, { type: 'Identifier', value: 'c' }, { type: 'Punctuator', value: '=' }, { type: 'Numeric', value: '3' }, { type: 'Punctuator', value: ';' }] }, { id: 3, value: [{ type: 'Keyword', value: 'var' }, { type: 'Identifier', value: 'd' }, { type: 'Punctuator', value: '=' }, { type: 'Numeric', value: '4' }, { type: 'Punctuator', value: ';' }] }], historyParseds: [{ id: 0, value: { type: 'Program', body: [{ type: 'VariableDeclaration', declarations: [{ type: 'VariableDeclarator', id: { type: 'Identifier', name: 'a' }, init: { type: 'Literal', value: 1, raw: '1' } }], kind: 'var' }], sourceType: 'script' } }, { id: 1, value: { type: 'Program', body: [{ type: 'VariableDeclaration', declarations: [{ type: 'VariableDeclarator', id: { type: 'Identifier', name: 'b' }, init: { type: 'Literal', value: 2, raw: '2' } }], kind: 'var' }], sourceType: 'script' } }], isShowHistoryInputs: false, isShowHistoryTokenizeds: false, isShowHistoryParseds: false, nextId: 4 }, { type: 'parse' });
        expect(state.historyParseds.length).deep.equal(3);
        expect(state.historyParseds[2]).deep.equal({ value: { sourceType: 'script', body: [{ kind: 'var', declarations: [{ init: { raw: '4', value: 4, type: 'Literal' }, id: { name: 'd', type: 'Identifier' }, type: 'VariableDeclarator' }], type: 'VariableDeclaration' }], type: 'Program' }, id: 3 });
        expect(state.historyTokenizeds[0].value.length).deep.equal(5);
        expect(state.historyTokenizeds[0].value[0].value).deep.equal('var');
        expect(state.historyTokenizeds[0].value[0].type).deep.equal('Keyword');
        expect(state.historyTokenizeds[0].value[1].value).deep.equal('a');
        expect(state.historyTokenizeds[0].value[1].type).deep.equal('Identifier');
        expect(state.historyTokenizeds[0].value[2].value).deep.equal('=');
        expect(state.historyTokenizeds[0].value[3].value).deep.equal('1');
        expect(state.historyTokenizeds[0].value[3].type).deep.equal('Numeric');
        expect(state.historyTokenizeds[1].value.length).deep.equal(5);
        expect(state.historyTokenizeds[1].value[0].value).deep.equal('var');
        expect(state.historyTokenizeds[1].value[0].type).deep.equal('Keyword');
        expect(state.historyTokenizeds[1].value[1].value).deep.equal('b');
        expect(state.historyTokenizeds[1].value[1].type).deep.equal('Identifier');
        expect(state.historyTokenizeds[1].value[2].value).deep.equal('=');
        expect(state.historyTokenizeds[1].value[3].value).deep.equal('2');
        expect(state.historyTokenizeds[1].value[3].type).deep.equal('Numeric');
        expect(state.historyTokenizeds[2].value.length).deep.equal(5);
        expect(state.historyTokenizeds[2].value[0].value).deep.equal('var');
        expect(state.historyTokenizeds[2].value[0].type).deep.equal('Keyword');
        expect(state.historyTokenizeds[2].value[1].value).deep.equal('c');
        expect(state.historyTokenizeds[2].value[1].type).deep.equal('Identifier');
        expect(state.historyTokenizeds[2].value[2].value).deep.equal('=');
        expect(state.historyTokenizeds[2].value[3].value).deep.equal('3');
        expect(state.historyTokenizeds[2].value[3].type).deep.equal('Numeric');
        expect(state.historyTokenizeds[3].value.length).deep.equal(5);
        expect(state.historyTokenizeds[3].value[0].value).deep.equal('var');
        expect(state.historyTokenizeds[3].value[0].type).deep.equal('Keyword');
        expect(state.historyTokenizeds[3].value[1].value).deep.equal('d');
        expect(state.historyTokenizeds[3].value[1].type).deep.equal('Identifier');
        expect(state.historyTokenizeds[3].value[2].value).deep.equal('=');
        expect(state.historyTokenizeds[3].value[3].value).deep.equal('4');
        expect(state.historyTokenizeds[3].value[3].type).deep.equal('Numeric');
    });
    it('should handle [input, tokenize, input, parse]', () => {
        state = reducer({ historyInputs: [], currentInput: '', historyTokenizeds: [], historyParseds: [], isShowHistoryInputs: false, isShowHistoryTokenizeds: false, isShowHistoryParseds: false, nextId: 0 }, { type: 'input', value: '1' });
        expect(state.currentInput).deep.equal('1');
        state = reducer({ historyInputs: [], currentInput: '1', historyTokenizeds: [], historyParseds: [], isShowHistoryInputs: false, isShowHistoryTokenizeds: false, isShowHistoryParseds: false, nextId: 0 }, { type: 'input', value: '1+' });
        expect(state.currentInput).deep.equal('1+');
        state = reducer({ historyInputs: [], currentInput: '1+', historyTokenizeds: [], historyParseds: [], isShowHistoryInputs: false, isShowHistoryTokenizeds: false, isShowHistoryParseds: false, nextId: 0 }, { type: 'input', value: '1+1' });
        expect(state.currentInput).deep.equal('1+1');
        state = reducer({ historyInputs: [], currentInput: '1+1', historyTokenizeds: [], historyParseds: [], isShowHistoryInputs: false, isShowHistoryTokenizeds: false, isShowHistoryParseds: false, nextId: 0 }, { type: 'tokenize' });
        expect(state.nextId).deep.equal(1);
        expect(state.historyTokenizeds.length).deep.equal(1);
        expect(state.historyTokenizeds[0]).deep.equal({ value: [{ value: '1', type: 'Numeric' }, { value: '+', type: 'Punctuator' }, { value: '1', type: 'Numeric' }], id: 0 });
        expect(state.historyInputs.length).deep.equal(1);
        expect(state.historyInputs[0]).deep.equal({ value: '1+1', id: 0 });
        state = reducer({ historyInputs: [{ id: 0, value: '1+1' }], currentInput: '1+1', historyTokenizeds: [{ id: 0, value: [{ type: 'Numeric', value: '1' }, { type: 'Punctuator', value: '+' }, { type: 'Numeric', value: '1' }] }], historyParseds: [], isShowHistoryInputs: false, isShowHistoryTokenizeds: false, isShowHistoryParseds: false, nextId: 1 }, { type: 'input', value: '1+' });
        expect(state.historyTokenizeds[0].value.length).deep.equal(3);
        expect(state.historyTokenizeds[0].value[1].value).deep.equal('+');
        expect(state.historyTokenizeds[0].value[1].type).deep.equal('Punctuator');
        expect(state.currentInput).deep.equal('1+');
        state = reducer({ historyInputs: [{ id: 0, value: '1+1' }], currentInput: '1+', historyTokenizeds: [{ id: 0, value: [{ type: 'Numeric', value: '1' }, { type: 'Punctuator', value: '+' }, { type: 'Numeric', value: '1' }] }], historyParseds: [], isShowHistoryInputs: false, isShowHistoryTokenizeds: false, isShowHistoryParseds: false, nextId: 1 }, { type: 'input', value: '1+2' });
        expect(state.historyTokenizeds[0].value.length).deep.equal(3);
        expect(state.historyTokenizeds[0].value[1].value).deep.equal('+');
        expect(state.historyTokenizeds[0].value[1].type).deep.equal('Punctuator');
        expect(state.currentInput).deep.equal('1+2');
        state = reducer({ historyInputs: [{ id: 0, value: '1+1' }], currentInput: '1+2', historyTokenizeds: [{ id: 0, value: [{ type: 'Numeric', value: '1' }, { type: 'Punctuator', value: '+' }, { type: 'Numeric', value: '1' }] }], historyParseds: [], isShowHistoryInputs: false, isShowHistoryTokenizeds: false, isShowHistoryParseds: false, nextId: 1 }, { type: 'parse' });
        expect(state.historyParseds.length).deep.equal(1);
        expect(state.historyParseds[0]).deep.equal({ value: { sourceType: 'script', body: [{ expression: { right: { raw: '1', value: 1, type: 'Literal' }, left: { raw: '1', value: 1, type: 'Literal' }, operator: '+', type: 'BinaryExpression' }, type: 'ExpressionStatement' }], type: 'Program' }, id: 0 });
        expect(state.historyTokenizeds[0].value.length).deep.equal(3);
        expect(state.historyTokenizeds[0].value[1].value).deep.equal('+');
        expect(state.historyTokenizeds[0].value[1].type).deep.equal('Punctuator');
    });
    it('should handle [input, tokenize, input, tokenize, parse]', () => {
        state = reducer({ historyInputs: [{ id: 0, value: '1+1' }], currentInput: '1+2', historyTokenizeds: [{ id: 0, value: [{ type: 'Numeric', value: '1' }, { type: 'Punctuator', value: '+' }, { type: 'Numeric', value: '1' }] }], historyParseds: [{ id: 0, value: { type: 'Program', body: [{ type: 'ExpressionStatement', expression: { type: 'BinaryExpression', operator: '+', left: { type: 'Literal', value: 1, raw: '1' }, right: { type: 'Literal', value: 1, raw: '1' } } }], sourceType: 'script' } }], isShowHistoryInputs: false, isShowHistoryTokenizeds: false, isShowHistoryParseds: false, nextId: 1 }, { type: 'tokenize' });
        expect(state.nextId).deep.equal(2);
        expect(state.historyTokenizeds.length).deep.equal(2);
        expect(state.historyTokenizeds[1]).deep.equal({ value: [{ value: '1', type: 'Numeric' }, { value: '+', type: 'Punctuator' }, { value: '2', type: 'Numeric' }], id: 1 });
        expect(state.historyTokenizeds[0].value.length).deep.equal(3);
        expect(state.historyTokenizeds[0].value[1].value).deep.equal('+');
        expect(state.historyTokenizeds[0].value[1].type).deep.equal('Punctuator');
        expect(state.historyInputs.length).deep.equal(2);
        expect(state.historyInputs[1]).deep.equal({ value: '1+2', id: 1 });
        state = reducer({ historyInputs: [{ id: 0, value: '1+1' }, { id: 1, value: '1+2' }], currentInput: '1+2', historyTokenizeds: [{ id: 0, value: [{ type: 'Numeric', value: '1' }, { type: 'Punctuator', value: '+' }, { type: 'Numeric', value: '1' }] }, { id: 1, value: [{ type: 'Numeric', value: '1' }, { type: 'Punctuator', value: '+' }, { type: 'Numeric', value: '2' }] }], historyParseds: [{ id: 0, value: { type: 'Program', body: [{ type: 'ExpressionStatement', expression: { type: 'BinaryExpression', operator: '+', left: { type: 'Literal', value: 1, raw: '1' }, right: { type: 'Literal', value: 1, raw: '1' } } }], sourceType: 'script' } }], isShowHistoryInputs: false, isShowHistoryTokenizeds: false, isShowHistoryParseds: false, nextId: 2 }, { type: 'input', value: '1+' });
        expect(state.historyTokenizeds[0].value.length).deep.equal(3);
        expect(state.historyTokenizeds[0].value[1].value).deep.equal('+');
        expect(state.historyTokenizeds[0].value[1].type).deep.equal('Punctuator');
        expect(state.historyTokenizeds[1].value.length).deep.equal(3);
        expect(state.historyTokenizeds[1].value[0].value).deep.equal('1');
        expect(state.historyTokenizeds[1].value[1].value).deep.equal('+');
        expect(state.historyTokenizeds[1].value[1].type).deep.equal('Punctuator');
        expect(state.currentInput).deep.equal('1+');
        state = reducer({ historyInputs: [{ id: 0, value: '1+1' }, { id: 1, value: '1+2' }], currentInput: '1+', historyTokenizeds: [{ id: 0, value: [{ type: 'Numeric', value: '1' }, { type: 'Punctuator', value: '+' }, { type: 'Numeric', value: '1' }] }, { id: 1, value: [{ type: 'Numeric', value: '1' }, { type: 'Punctuator', value: '+' }, { type: 'Numeric', value: '2' }] }], historyParseds: [{ id: 0, value: { type: 'Program', body: [{ type: 'ExpressionStatement', expression: { type: 'BinaryExpression', operator: '+', left: { type: 'Literal', value: 1, raw: '1' }, right: { type: 'Literal', value: 1, raw: '1' } } }], sourceType: 'script' } }], isShowHistoryInputs: false, isShowHistoryTokenizeds: false, isShowHistoryParseds: false, nextId: 2 }, { type: 'input', value: '1+3' });
        expect(state.historyTokenizeds[0].value.length).deep.equal(3);
        expect(state.historyTokenizeds[0].value[1].value).deep.equal('+');
        expect(state.historyTokenizeds[0].value[1].type).deep.equal('Punctuator');
        expect(state.historyTokenizeds[1].value.length).deep.equal(3);
        expect(state.historyTokenizeds[1].value[0].value).deep.equal('1');
        expect(state.historyTokenizeds[1].value[1].value).deep.equal('+');
        expect(state.historyTokenizeds[1].value[1].type).deep.equal('Punctuator');
        expect(state.currentInput).deep.equal('1+3');
        state = reducer({ historyInputs: [{ id: 0, value: '1+1' }, { id: 1, value: '1+2' }], currentInput: '1+3', historyTokenizeds: [{ id: 0, value: [{ type: 'Numeric', value: '1' }, { type: 'Punctuator', value: '+' }, { type: 'Numeric', value: '1' }] }, { id: 1, value: [{ type: 'Numeric', value: '1' }, { type: 'Punctuator', value: '+' }, { type: 'Numeric', value: '2' }] }], historyParseds: [{ id: 0, value: { type: 'Program', body: [{ type: 'ExpressionStatement', expression: { type: 'BinaryExpression', operator: '+', left: { type: 'Literal', value: 1, raw: '1' }, right: { type: 'Literal', value: 1, raw: '1' } } }], sourceType: 'script' } }], isShowHistoryInputs: false, isShowHistoryTokenizeds: false, isShowHistoryParseds: false, nextId: 2 }, { type: 'tokenize' });
        expect(state.nextId).deep.equal(3);
        expect(state.historyTokenizeds.length).deep.equal(3);
        expect(state.historyTokenizeds[2]).deep.equal({ value: [{ value: '1', type: 'Numeric' }, { value: '+', type: 'Punctuator' }, { value: '3', type: 'Numeric' }], id: 2 });
        expect(state.historyTokenizeds[0].value.length).deep.equal(3);
        expect(state.historyTokenizeds[0].value[1].value).deep.equal('+');
        expect(state.historyTokenizeds[0].value[1].type).deep.equal('Punctuator');
        expect(state.historyTokenizeds[1].value.length).deep.equal(3);
        expect(state.historyTokenizeds[1].value[0].value).deep.equal('1');
        expect(state.historyTokenizeds[1].value[1].value).deep.equal('+');
        expect(state.historyTokenizeds[1].value[1].type).deep.equal('Punctuator');
        expect(state.historyInputs.length).deep.equal(3);
        expect(state.historyInputs[2]).deep.equal({ value: '1+3', id: 2 });
        state = reducer({ historyInputs: [{ id: 0, value: '1+1' }, { id: 1, value: '1+2' }, { id: 2, value: '1+3' }], currentInput: '1+3', historyTokenizeds: [{ id: 0, value: [{ type: 'Numeric', value: '1' }, { type: 'Punctuator', value: '+' }, { type: 'Numeric', value: '1' }] }, { id: 1, value: [{ type: 'Numeric', value: '1' }, { type: 'Punctuator', value: '+' }, { type: 'Numeric', value: '2' }] }, { id: 2, value: [{ type: 'Numeric', value: '1' }, { type: 'Punctuator', value: '+' }, { type: 'Numeric', value: '3' }] }], historyParseds: [{ id: 0, value: { type: 'Program', body: [{ type: 'ExpressionStatement', expression: { type: 'BinaryExpression', operator: '+', left: { type: 'Literal', value: 1, raw: '1' }, right: { type: 'Literal', value: 1, raw: '1' } } }], sourceType: 'script' } }], isShowHistoryInputs: false, isShowHistoryTokenizeds: false, isShowHistoryParseds: false, nextId: 3 }, { type: 'parse' });
        expect(state.historyParseds.length).deep.equal(2);
        expect(state.historyParseds[1]).deep.equal({ value: { sourceType: 'script', body: [{ expression: { right: { raw: '3', value: 3, type: 'Literal' }, left: { raw: '1', value: 1, type: 'Literal' }, operator: '+', type: 'BinaryExpression' }, type: 'ExpressionStatement' }], type: 'Program' }, id: 2 });
        expect(state.historyTokenizeds[0].value.length).deep.equal(3);
        expect(state.historyTokenizeds[0].value[1].value).deep.equal('+');
        expect(state.historyTokenizeds[0].value[1].type).deep.equal('Punctuator');
        expect(state.historyTokenizeds[1].value.length).deep.equal(3);
        expect(state.historyTokenizeds[1].value[0].value).deep.equal('1');
        expect(state.historyTokenizeds[1].value[1].value).deep.equal('+');
        expect(state.historyTokenizeds[1].value[1].type).deep.equal('Punctuator');
        expect(state.historyTokenizeds[2].value.length).deep.equal(3);
        expect(state.historyTokenizeds[2].value[0].value).deep.equal('1');
        expect(state.historyTokenizeds[2].value[1].value).deep.equal('+');
        expect(state.historyTokenizeds[2].value[1].type).deep.equal('Punctuator');
    });
});
